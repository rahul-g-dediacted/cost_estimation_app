/* 
 * RSMeans Consumer REST API V1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Gordian.DataApi.Model
{
    /// <summary>
    /// CostLineDto
    /// </summary>
    [DataContract]
    public partial class CostLineDto :  IEquatable<CostLineDto>, IValidatableObject
    {
        /// <summary>
        /// Defines CostDataFormat
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CostDataFormatEnum
        {
            
            /// <summary>
            /// Enum Mf for value: mf
            /// </summary>
            [EnumMember(Value = "mf")]
            Mf = 1,
            
            /// <summary>
            /// Enum Mf95 for value: mf95
            /// </summary>
            [EnumMember(Value = "mf95")]
            Mf95 = 2
        }

        /// <summary>
        /// Gets or Sets CostDataFormat
        /// </summary>
        [DataMember(Name="costDataFormat", EmitDefaultValue=false)]
        public CostDataFormatEnum? CostDataFormat { get; set; }
        /// <summary>
        /// Defines MeasurementSystem
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MeasurementSystemEnum
        {
            
            /// <summary>
            /// Enum Imp for value: imp
            /// </summary>
            [EnumMember(Value = "imp")]
            Imp = 1,
            
            /// <summary>
            /// Enum Met for value: met
            /// </summary>
            [EnumMember(Value = "met")]
            Met = 2
        }

        /// <summary>
        /// Gets or Sets MeasurementSystem
        /// </summary>
        [DataMember(Name="measurementSystem", EmitDefaultValue=false)]
        public MeasurementSystemEnum? MeasurementSystem { get; set; }
        /// <summary>
        /// Defines LaborType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LaborTypeEnum
        {
            
            /// <summary>
            /// Enum Std for value: std
            /// </summary>
            [EnumMember(Value = "std")]
            Std = 1,
            
            /// <summary>
            /// Enum Opn for value: opn
            /// </summary>
            [EnumMember(Value = "opn")]
            Opn = 2,
            
            /// <summary>
            /// Enum Fmr for value: fmr
            /// </summary>
            [EnumMember(Value = "fmr")]
            Fmr = 3,
            
            /// <summary>
            /// Enum Res for value: res
            /// </summary>
            [EnumMember(Value = "res")]
            Res = 4,
            
            /// <summary>
            /// Enum Rr for value: rr
            /// </summary>
            [EnumMember(Value = "rr")]
            Rr = 5,
            
            /// <summary>
            /// Enum Fed for value: fed
            /// </summary>
            [EnumMember(Value = "fed")]
            Fed = 6
        }

        /// <summary>
        /// Gets or Sets LaborType
        /// </summary>
        [DataMember(Name="laborType", EmitDefaultValue=false)]
        public LaborTypeEnum? LaborType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CostLineDto" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="lineNumber">lineNumber.</param>
        /// <param name="costDataFormat">costDataFormat.</param>
        /// <param name="measurementSystem">measurementSystem.</param>
        /// <param name="laborType">laborType.</param>
        /// <param name="description">description.</param>
        /// <param name="note">note.</param>
        /// <param name="catalogReference">catalogReference.</param>
        /// <param name="parentDivisionReference">parentDivisionReference.</param>
        /// <param name="unitOfMeasure">unitOfMeasure.</param>
        /// <param name="installCosts">installCosts.</param>
        /// <param name="demoCosts">demoCosts.</param>
        /// <param name="modifiers">modifiers.</param>
        /// <param name="hierarchies">hierarchies.</param>
        public CostLineDto(string id = default(string), string lineNumber = default(string), CostDataFormatEnum? costDataFormat = default(CostDataFormatEnum?), MeasurementSystemEnum? measurementSystem = default(MeasurementSystemEnum?), LaborTypeEnum? laborType = default(LaborTypeEnum?), string description = default(string), string note = default(string), ReferenceCatalogDto catalogReference = default(ReferenceCatalogDto), ReferenceDivisionDto parentDivisionReference = default(ReferenceDivisionDto), string unitOfMeasure = default(string), CostDataDto installCosts = default(CostDataDto), CostDataDto demoCosts = default(CostDataDto), NonpagedListModifierAppliedDto modifiers = default(NonpagedListModifierAppliedDto), List<DivisionLightDto> hierarchies = default(List<DivisionLightDto>))
        {
            this.Id = id;
            this.LineNumber = lineNumber;
            this.CostDataFormat = costDataFormat;
            this.MeasurementSystem = measurementSystem;
            this.LaborType = laborType;
            this.Description = description;
            this.Note = note;
            this.CatalogReference = catalogReference;
            this.ParentDivisionReference = parentDivisionReference;
            this.UnitOfMeasure = unitOfMeasure;
            this.InstallCosts = installCosts;
            this.DemoCosts = demoCosts;
            this.Modifiers = modifiers;
            this.Hierarchies = hierarchies;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets LineNumber
        /// </summary>
        [DataMember(Name="lineNumber", EmitDefaultValue=false)]
        public string LineNumber { get; set; }




        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Note
        /// </summary>
        [DataMember(Name="note", EmitDefaultValue=false)]
        public string Note { get; set; }

        /// <summary>
        /// Gets or Sets CatalogReference
        /// </summary>
        [DataMember(Name="catalogReference", EmitDefaultValue=false)]
        public ReferenceCatalogDto CatalogReference { get; set; }

        /// <summary>
        /// Gets or Sets ParentDivisionReference
        /// </summary>
        [DataMember(Name="parentDivisionReference", EmitDefaultValue=false)]
        public ReferenceDivisionDto ParentDivisionReference { get; set; }

        /// <summary>
        /// Gets or Sets UnitOfMeasure
        /// </summary>
        [DataMember(Name="unitOfMeasure", EmitDefaultValue=false)]
        public string UnitOfMeasure { get; set; }

        /// <summary>
        /// Gets or Sets InstallCosts
        /// </summary>
        [DataMember(Name="installCosts", EmitDefaultValue=false)]
        public CostDataDto InstallCosts { get; set; }

        /// <summary>
        /// Gets or Sets DemoCosts
        /// </summary>
        [DataMember(Name="demoCosts", EmitDefaultValue=false)]
        public CostDataDto DemoCosts { get; set; }

        /// <summary>
        /// Gets or Sets Modifiers
        /// </summary>
        [DataMember(Name="modifiers", EmitDefaultValue=false)]
        public NonpagedListModifierAppliedDto Modifiers { get; set; }

        /// <summary>
        /// Gets or Sets Hierarchies
        /// </summary>
        [DataMember(Name="hierarchies", EmitDefaultValue=false)]
        public List<DivisionLightDto> Hierarchies { get; set; }

        /// <summary>
        /// Gets or Sets Href
        /// </summary>
        [DataMember(Name="href", EmitDefaultValue=false)]
        public string Href { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CostLineDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LineNumber: ").Append(LineNumber).Append("\n");
            sb.Append("  CostDataFormat: ").Append(CostDataFormat).Append("\n");
            sb.Append("  MeasurementSystem: ").Append(MeasurementSystem).Append("\n");
            sb.Append("  LaborType: ").Append(LaborType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  CatalogReference: ").Append(CatalogReference).Append("\n");
            sb.Append("  ParentDivisionReference: ").Append(ParentDivisionReference).Append("\n");
            sb.Append("  UnitOfMeasure: ").Append(UnitOfMeasure).Append("\n");
            sb.Append("  InstallCosts: ").Append(InstallCosts).Append("\n");
            sb.Append("  DemoCosts: ").Append(DemoCosts).Append("\n");
            sb.Append("  Modifiers: ").Append(Modifiers).Append("\n");
            sb.Append("  Hierarchies: ").Append(Hierarchies).Append("\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CostLineDto);
        }

        /// <summary>
        /// Returns true if CostLineDto instances are equal
        /// </summary>
        /// <param name="input">Instance of CostLineDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CostLineDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LineNumber == input.LineNumber ||
                    (this.LineNumber != null &&
                    this.LineNumber.Equals(input.LineNumber))
                ) && 
                (
                    this.CostDataFormat == input.CostDataFormat ||
                    (this.CostDataFormat != null &&
                    this.CostDataFormat.Equals(input.CostDataFormat))
                ) && 
                (
                    this.MeasurementSystem == input.MeasurementSystem ||
                    (this.MeasurementSystem != null &&
                    this.MeasurementSystem.Equals(input.MeasurementSystem))
                ) && 
                (
                    this.LaborType == input.LaborType ||
                    (this.LaborType != null &&
                    this.LaborType.Equals(input.LaborType))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Note == input.Note ||
                    (this.Note != null &&
                    this.Note.Equals(input.Note))
                ) && 
                (
                    this.CatalogReference == input.CatalogReference ||
                    (this.CatalogReference != null &&
                    this.CatalogReference.Equals(input.CatalogReference))
                ) && 
                (
                    this.ParentDivisionReference == input.ParentDivisionReference ||
                    (this.ParentDivisionReference != null &&
                    this.ParentDivisionReference.Equals(input.ParentDivisionReference))
                ) && 
                (
                    this.UnitOfMeasure == input.UnitOfMeasure ||
                    (this.UnitOfMeasure != null &&
                    this.UnitOfMeasure.Equals(input.UnitOfMeasure))
                ) && 
                (
                    this.InstallCosts == input.InstallCosts ||
                    (this.InstallCosts != null &&
                    this.InstallCosts.Equals(input.InstallCosts))
                ) && 
                (
                    this.DemoCosts == input.DemoCosts ||
                    (this.DemoCosts != null &&
                    this.DemoCosts.Equals(input.DemoCosts))
                ) && 
                (
                    this.Modifiers == input.Modifiers ||
                    (this.Modifiers != null &&
                    this.Modifiers.Equals(input.Modifiers))
                ) && 
                (
                    this.Hierarchies == input.Hierarchies ||
                    this.Hierarchies != null &&
                    this.Hierarchies.SequenceEqual(input.Hierarchies)
                ) && 
                (
                    this.Href == input.Href ||
                    (this.Href != null &&
                    this.Href.Equals(input.Href))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.LineNumber != null)
                    hashCode = hashCode * 59 + this.LineNumber.GetHashCode();
                if (this.CostDataFormat != null)
                    hashCode = hashCode * 59 + this.CostDataFormat.GetHashCode();
                if (this.MeasurementSystem != null)
                    hashCode = hashCode * 59 + this.MeasurementSystem.GetHashCode();
                if (this.LaborType != null)
                    hashCode = hashCode * 59 + this.LaborType.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Note != null)
                    hashCode = hashCode * 59 + this.Note.GetHashCode();
                if (this.CatalogReference != null)
                    hashCode = hashCode * 59 + this.CatalogReference.GetHashCode();
                if (this.ParentDivisionReference != null)
                    hashCode = hashCode * 59 + this.ParentDivisionReference.GetHashCode();
                if (this.UnitOfMeasure != null)
                    hashCode = hashCode * 59 + this.UnitOfMeasure.GetHashCode();
                if (this.InstallCosts != null)
                    hashCode = hashCode * 59 + this.InstallCosts.GetHashCode();
                if (this.DemoCosts != null)
                    hashCode = hashCode * 59 + this.DemoCosts.GetHashCode();
                if (this.Modifiers != null)
                    hashCode = hashCode * 59 + this.Modifiers.GetHashCode();
                if (this.Hierarchies != null)
                    hashCode = hashCode * 59 + this.Hierarchies.GetHashCode();
                if (this.Href != null)
                    hashCode = hashCode * 59 + this.Href.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
