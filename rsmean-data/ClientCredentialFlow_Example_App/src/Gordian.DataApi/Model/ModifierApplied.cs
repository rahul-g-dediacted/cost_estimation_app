/* 
 * RSMeans Consumer REST API V1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Gordian.DataApi.Model
{
    /// <summary>
    /// ModifierApplied
    /// </summary>
    [DataContract]
    public partial class ModifierApplied :  IEquatable<ModifierApplied>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModifierApplied" /> class.
        /// </summary>
        /// <param name="catalog">catalog.</param>
        /// <param name="unitCostLineId">unitCostLineId.</param>
        /// <param name="id">id.</param>
        /// <param name="description">description.</param>
        /// <param name="percentValues">percentValues.</param>
        /// <param name="appliedCosts">appliedCosts.</param>
        public ModifierApplied(ReferenceUnitCatalog catalog = default(ReferenceUnitCatalog), string unitCostLineId = default(string), string id = default(string), string description = default(string), ModifierCostData percentValues = default(ModifierCostData), ModifierCostData appliedCosts = default(ModifierCostData))
        {
            this.Catalog = catalog;
            this.UnitCostLineId = unitCostLineId;
            this.Id = id;
            this.Description = description;
            this.PercentValues = percentValues;
            this.AppliedCosts = appliedCosts;
        }
        
        /// <summary>
        /// Gets or Sets Catalog
        /// </summary>
        [DataMember(Name="catalog", EmitDefaultValue=false)]
        public ReferenceUnitCatalog Catalog { get; set; }

        /// <summary>
        /// Gets or Sets UnitCostLineId
        /// </summary>
        [DataMember(Name="unitCostLineId", EmitDefaultValue=false)]
        public string UnitCostLineId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets PercentValues
        /// </summary>
        [DataMember(Name="percentValues", EmitDefaultValue=false)]
        public ModifierCostData PercentValues { get; set; }

        /// <summary>
        /// Gets or Sets AppliedCosts
        /// </summary>
        [DataMember(Name="appliedCosts", EmitDefaultValue=false)]
        public ModifierCostData AppliedCosts { get; set; }

        /// <summary>
        /// Gets or Sets Href
        /// </summary>
        [DataMember(Name="href", EmitDefaultValue=false)]
        public string Href { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModifierApplied {\n");
            sb.Append("  Catalog: ").Append(Catalog).Append("\n");
            sb.Append("  UnitCostLineId: ").Append(UnitCostLineId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  PercentValues: ").Append(PercentValues).Append("\n");
            sb.Append("  AppliedCosts: ").Append(AppliedCosts).Append("\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModifierApplied);
        }

        /// <summary>
        /// Returns true if ModifierApplied instances are equal
        /// </summary>
        /// <param name="input">Instance of ModifierApplied to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModifierApplied input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Catalog == input.Catalog ||
                    (this.Catalog != null &&
                    this.Catalog.Equals(input.Catalog))
                ) && 
                (
                    this.UnitCostLineId == input.UnitCostLineId ||
                    (this.UnitCostLineId != null &&
                    this.UnitCostLineId.Equals(input.UnitCostLineId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.PercentValues == input.PercentValues ||
                    (this.PercentValues != null &&
                    this.PercentValues.Equals(input.PercentValues))
                ) && 
                (
                    this.AppliedCosts == input.AppliedCosts ||
                    (this.AppliedCosts != null &&
                    this.AppliedCosts.Equals(input.AppliedCosts))
                ) && 
                (
                    this.Href == input.Href ||
                    (this.Href != null &&
                    this.Href.Equals(input.Href))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Catalog != null)
                    hashCode = hashCode * 59 + this.Catalog.GetHashCode();
                if (this.UnitCostLineId != null)
                    hashCode = hashCode * 59 + this.UnitCostLineId.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.PercentValues != null)
                    hashCode = hashCode * 59 + this.PercentValues.GetHashCode();
                if (this.AppliedCosts != null)
                    hashCode = hashCode * 59 + this.AppliedCosts.GetHashCode();
                if (this.Href != null)
                    hashCode = hashCode * 59 + this.Href.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
