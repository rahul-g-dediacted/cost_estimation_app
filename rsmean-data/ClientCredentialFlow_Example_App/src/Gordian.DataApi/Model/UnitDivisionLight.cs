/* 
 * RSMeans Consumer REST API V1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Gordian.DataApi.Model
{
    /// <summary>
    /// Represents a single unit data division or sub-division
    /// </summary>
    [DataContract]
    public partial class UnitDivisionLight :  IEquatable<UnitDivisionLight>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UnitDivisionLight" /> class.
        /// </summary>
        /// <param name="id">The Id..</param>
        /// <param name="level">The division hierarchy level..</param>
        /// <param name="divisionCode">The DivisionCode..</param>
        /// <param name="description">The division description..</param>
        /// <param name="note">Division note..</param>
        public UnitDivisionLight(string id = default(string), int? level = default(int?), string divisionCode = default(string), string description = default(string), string note = default(string))
        {
            this.Id = id;
            this.Level = level;
            this.DivisionCode = divisionCode;
            this.Description = description;
            this.Note = note;
        }
        
        /// <summary>
        /// The Id.
        /// </summary>
        /// <value>The Id.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The division hierarchy level.
        /// </summary>
        /// <value>The division hierarchy level.</value>
        [DataMember(Name="level", EmitDefaultValue=false)]
        public int? Level { get; set; }

        /// <summary>
        /// The DivisionCode.
        /// </summary>
        /// <value>The DivisionCode.</value>
        [DataMember(Name="divisionCode", EmitDefaultValue=false)]
        public string DivisionCode { get; set; }

        /// <summary>
        /// The division description.
        /// </summary>
        /// <value>The division description.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Division note.
        /// </summary>
        /// <value>Division note.</value>
        [DataMember(Name="note", EmitDefaultValue=false)]
        public string Note { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UnitDivisionLight {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  DivisionCode: ").Append(DivisionCode).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UnitDivisionLight);
        }

        /// <summary>
        /// Returns true if UnitDivisionLight instances are equal
        /// </summary>
        /// <param name="input">Instance of UnitDivisionLight to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UnitDivisionLight input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Level == input.Level ||
                    (this.Level != null &&
                    this.Level.Equals(input.Level))
                ) && 
                (
                    this.DivisionCode == input.DivisionCode ||
                    (this.DivisionCode != null &&
                    this.DivisionCode.Equals(input.DivisionCode))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Note == input.Note ||
                    (this.Note != null &&
                    this.Note.Equals(input.Note))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Level != null)
                    hashCode = hashCode * 59 + this.Level.GetHashCode();
                if (this.DivisionCode != null)
                    hashCode = hashCode * 59 + this.DivisionCode.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Note != null)
                    hashCode = hashCode * 59 + this.Note.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
