/* 
 * RSMeans Consumer REST API V1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Gordian.DataApi.Model
{
    /// <summary>
    /// Aggregated monthly toc costs by division
    /// </summary>
    [DataContract]
    public partial class MonthlyDivisionTocCost :  IEquatable<MonthlyDivisionTocCost>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MonthlyDivisionTocCost" /> class.
        /// </summary>
        /// <param name="divisions">divisions.</param>
        public MonthlyDivisionTocCost(List<DivisionTocCost> divisions = default(List<DivisionTocCost>))
        {
            this.Divisions = divisions;
        }
        
        /// <summary>
        /// Gets or Sets Year
        /// </summary>
        [DataMember(Name="year", EmitDefaultValue=false)]
        public int? Year { get; private set; }

        /// <summary>
        /// Gets or Sets Month
        /// </summary>
        [DataMember(Name="month", EmitDefaultValue=false)]
        public int? Month { get; private set; }

        /// <summary>
        /// Gets or Sets MonthDescription
        /// </summary>
        [DataMember(Name="monthDescription", EmitDefaultValue=false)]
        public string MonthDescription { get; private set; }

        /// <summary>
        /// Gets or Sets Divisions
        /// </summary>
        [DataMember(Name="divisions", EmitDefaultValue=false)]
        public List<DivisionTocCost> Divisions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MonthlyDivisionTocCost {\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  Month: ").Append(Month).Append("\n");
            sb.Append("  MonthDescription: ").Append(MonthDescription).Append("\n");
            sb.Append("  Divisions: ").Append(Divisions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MonthlyDivisionTocCost);
        }

        /// <summary>
        /// Returns true if MonthlyDivisionTocCost instances are equal
        /// </summary>
        /// <param name="input">Instance of MonthlyDivisionTocCost to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MonthlyDivisionTocCost input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Year == input.Year ||
                    (this.Year != null &&
                    this.Year.Equals(input.Year))
                ) && 
                (
                    this.Month == input.Month ||
                    (this.Month != null &&
                    this.Month.Equals(input.Month))
                ) && 
                (
                    this.MonthDescription == input.MonthDescription ||
                    (this.MonthDescription != null &&
                    this.MonthDescription.Equals(input.MonthDescription))
                ) && 
                (
                    this.Divisions == input.Divisions ||
                    this.Divisions != null &&
                    this.Divisions.SequenceEqual(input.Divisions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Year != null)
                    hashCode = hashCode * 59 + this.Year.GetHashCode();
                if (this.Month != null)
                    hashCode = hashCode * 59 + this.Month.GetHashCode();
                if (this.MonthDescription != null)
                    hashCode = hashCode * 59 + this.MonthDescription.GetHashCode();
                if (this.Divisions != null)
                    hashCode = hashCode * 59 + this.Divisions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
