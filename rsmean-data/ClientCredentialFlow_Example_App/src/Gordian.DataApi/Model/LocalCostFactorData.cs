/* 
 * RSMeans Consumer REST API V1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Gordian.DataApi.Model
{
    /// <summary>
    /// LocalCostFactorData
    /// </summary>
    [DataContract]
    public partial class LocalCostFactorData :  IEquatable<LocalCostFactorData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LocalCostFactorData" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="release">release.</param>
        /// <param name="costFactors">costFactors.</param>
        /// <param name="location">location.</param>
        public LocalCostFactorData(string id = default(string), ReferenceRelease release = default(ReferenceRelease), CostFactorData costFactors = default(CostFactorData), ReferenceLocation location = default(ReferenceLocation))
        {
            this.Id = id;
            this.Release = release;
            this.CostFactors = costFactors;
            this.Location = location;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Release
        /// </summary>
        [DataMember(Name="release", EmitDefaultValue=false)]
        public ReferenceRelease Release { get; set; }

        /// <summary>
        /// Gets or Sets CostFactors
        /// </summary>
        [DataMember(Name="costFactors", EmitDefaultValue=false)]
        public CostFactorData CostFactors { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public ReferenceLocation Location { get; set; }

        /// <summary>
        /// Gets or Sets Href
        /// </summary>
        [DataMember(Name="href", EmitDefaultValue=false)]
        public string Href { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LocalCostFactorData {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Release: ").Append(Release).Append("\n");
            sb.Append("  CostFactors: ").Append(CostFactors).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LocalCostFactorData);
        }

        /// <summary>
        /// Returns true if LocalCostFactorData instances are equal
        /// </summary>
        /// <param name="input">Instance of LocalCostFactorData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LocalCostFactorData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Release == input.Release ||
                    (this.Release != null &&
                    this.Release.Equals(input.Release))
                ) && 
                (
                    this.CostFactors == input.CostFactors ||
                    (this.CostFactors != null &&
                    this.CostFactors.Equals(input.CostFactors))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Href == input.Href ||
                    (this.Href != null &&
                    this.Href.Equals(input.Href))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Release != null)
                    hashCode = hashCode * 59 + this.Release.GetHashCode();
                if (this.CostFactors != null)
                    hashCode = hashCode * 59 + this.CostFactors.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.Href != null)
                    hashCode = hashCode * 59 + this.Href.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
