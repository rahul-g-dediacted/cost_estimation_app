/* 
 * RSMeans Consumer REST API V1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Gordian.DataApi.Model
{
    /// <summary>
    /// Cost Line Crew.
    /// </summary>
    [DataContract]
    public partial class LineCrew :  IEquatable<LineCrew>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LineCrew" /> class.
        /// </summary>
        /// <param name="crewId">The crew identifier..</param>
        /// <param name="crewCode">The crew code..</param>
        /// <param name="crewDescription">The crew description..</param>
        /// <param name="crewQuantity">The crew quantity..</param>
        /// <param name="crewDailyOutput">The crew daily output..</param>
        /// <param name="crewLaborHours">The crew labor hours..</param>
        public LineCrew(int? crewId = default(int?), string crewCode = default(string), string crewDescription = default(string), double? crewQuantity = default(double?), double? crewDailyOutput = default(double?), double? crewLaborHours = default(double?))
        {
            this.CrewId = crewId;
            this.CrewCode = crewCode;
            this.CrewDescription = crewDescription;
            this.CrewQuantity = crewQuantity;
            this.CrewDailyOutput = crewDailyOutput;
            this.CrewLaborHours = crewLaborHours;
        }
        
        /// <summary>
        /// The crew identifier.
        /// </summary>
        /// <value>The crew identifier.</value>
        [DataMember(Name="crewId", EmitDefaultValue=false)]
        public int? CrewId { get; set; }

        /// <summary>
        /// The crew code.
        /// </summary>
        /// <value>The crew code.</value>
        [DataMember(Name="crewCode", EmitDefaultValue=false)]
        public string CrewCode { get; set; }

        /// <summary>
        /// The crew description.
        /// </summary>
        /// <value>The crew description.</value>
        [DataMember(Name="crewDescription", EmitDefaultValue=false)]
        public string CrewDescription { get; set; }

        /// <summary>
        /// The crew quantity.
        /// </summary>
        /// <value>The crew quantity.</value>
        [DataMember(Name="crewQuantity", EmitDefaultValue=false)]
        public double? CrewQuantity { get; set; }

        /// <summary>
        /// The crew daily output.
        /// </summary>
        /// <value>The crew daily output.</value>
        [DataMember(Name="crewDailyOutput", EmitDefaultValue=false)]
        public double? CrewDailyOutput { get; set; }

        /// <summary>
        /// The crew labor hours.
        /// </summary>
        /// <value>The crew labor hours.</value>
        [DataMember(Name="crewLaborHours", EmitDefaultValue=false)]
        public double? CrewLaborHours { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LineCrew {\n");
            sb.Append("  CrewId: ").Append(CrewId).Append("\n");
            sb.Append("  CrewCode: ").Append(CrewCode).Append("\n");
            sb.Append("  CrewDescription: ").Append(CrewDescription).Append("\n");
            sb.Append("  CrewQuantity: ").Append(CrewQuantity).Append("\n");
            sb.Append("  CrewDailyOutput: ").Append(CrewDailyOutput).Append("\n");
            sb.Append("  CrewLaborHours: ").Append(CrewLaborHours).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LineCrew);
        }

        /// <summary>
        /// Returns true if LineCrew instances are equal
        /// </summary>
        /// <param name="input">Instance of LineCrew to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LineCrew input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CrewId == input.CrewId ||
                    (this.CrewId != null &&
                    this.CrewId.Equals(input.CrewId))
                ) && 
                (
                    this.CrewCode == input.CrewCode ||
                    (this.CrewCode != null &&
                    this.CrewCode.Equals(input.CrewCode))
                ) && 
                (
                    this.CrewDescription == input.CrewDescription ||
                    (this.CrewDescription != null &&
                    this.CrewDescription.Equals(input.CrewDescription))
                ) && 
                (
                    this.CrewQuantity == input.CrewQuantity ||
                    (this.CrewQuantity != null &&
                    this.CrewQuantity.Equals(input.CrewQuantity))
                ) && 
                (
                    this.CrewDailyOutput == input.CrewDailyOutput ||
                    (this.CrewDailyOutput != null &&
                    this.CrewDailyOutput.Equals(input.CrewDailyOutput))
                ) && 
                (
                    this.CrewLaborHours == input.CrewLaborHours ||
                    (this.CrewLaborHours != null &&
                    this.CrewLaborHours.Equals(input.CrewLaborHours))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CrewId != null)
                    hashCode = hashCode * 59 + this.CrewId.GetHashCode();
                if (this.CrewCode != null)
                    hashCode = hashCode * 59 + this.CrewCode.GetHashCode();
                if (this.CrewDescription != null)
                    hashCode = hashCode * 59 + this.CrewDescription.GetHashCode();
                if (this.CrewQuantity != null)
                    hashCode = hashCode * 59 + this.CrewQuantity.GetHashCode();
                if (this.CrewDailyOutput != null)
                    hashCode = hashCode * 59 + this.CrewDailyOutput.GetHashCode();
                if (this.CrewLaborHours != null)
                    hashCode = hashCode * 59 + this.CrewLaborHours.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
