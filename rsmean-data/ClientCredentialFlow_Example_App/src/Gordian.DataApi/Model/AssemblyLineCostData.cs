/* 
 * RSMeans Consumer REST API V1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Gordian.DataApi.Model
{
    /// <summary>
    /// Assembly Cost Line CostData.
    /// </summary>
    [DataContract]
    public partial class AssemblyLineCostData :  IEquatable<AssemblyLineCostData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AssemblyLineCostData" /> class.
        /// </summary>
        /// <param name="installCost">The installation cost..</param>
        /// <param name="installOpCost">The installation op cost..</param>
        /// <param name="totalInHouseCost">The total in house cost..</param>
        /// <param name="materialCost">The material cost..</param>
        /// <param name="materialOpCost">The material op cost..</param>
        /// <param name="laborCost">The labor cost..</param>
        /// <param name="laborOpCost">The labor op cost..</param>
        /// <param name="equipmentCost">The equipment cost..</param>
        /// <param name="equipmentOpCost">The equipment op cost..</param>
        /// <param name="totalCost">The total cost..</param>
        /// <param name="totalOpCost">The total op cost..</param>
        /// <param name="laborCostInHouse">The labor InHouse cost..</param>
        /// <param name="equipmentCostInHouse">The Equipment InHouse cost..</param>
        /// <param name="materialCostInHouse">The Material InHouse cost..</param>
        /// <param name="totalCostInHouse">The Total InHouse cost..</param>
        public AssemblyLineCostData(double? installCost = default(double?), double? installOpCost = default(double?), double? totalInHouseCost = default(double?), double? materialCost = default(double?), double? materialOpCost = default(double?), double? laborCost = default(double?), double? laborOpCost = default(double?), double? equipmentCost = default(double?), double? equipmentOpCost = default(double?), double? totalCost = default(double?), double? totalOpCost = default(double?), double? laborCostInHouse = default(double?), double? equipmentCostInHouse = default(double?), double? materialCostInHouse = default(double?), double? totalCostInHouse = default(double?))
        {
            this.InstallCost = installCost;
            this.InstallOpCost = installOpCost;
            this.TotalInHouseCost = totalInHouseCost;
            this.MaterialCost = materialCost;
            this.MaterialOpCost = materialOpCost;
            this.LaborCost = laborCost;
            this.LaborOpCost = laborOpCost;
            this.EquipmentCost = equipmentCost;
            this.EquipmentOpCost = equipmentOpCost;
            this.TotalCost = totalCost;
            this.TotalOpCost = totalOpCost;
            this.LaborCostInHouse = laborCostInHouse;
            this.EquipmentCostInHouse = equipmentCostInHouse;
            this.MaterialCostInHouse = materialCostInHouse;
            this.TotalCostInHouse = totalCostInHouse;
        }
        
        /// <summary>
        /// The installation cost.
        /// </summary>
        /// <value>The installation cost.</value>
        [DataMember(Name="installCost", EmitDefaultValue=false)]
        public double? InstallCost { get; set; }

        /// <summary>
        /// The installation op cost.
        /// </summary>
        /// <value>The installation op cost.</value>
        [DataMember(Name="installOpCost", EmitDefaultValue=false)]
        public double? InstallOpCost { get; set; }

        /// <summary>
        /// The total in house cost.
        /// </summary>
        /// <value>The total in house cost.</value>
        [DataMember(Name="totalInHouseCost", EmitDefaultValue=false)]
        public double? TotalInHouseCost { get; set; }

        /// <summary>
        /// The material cost.
        /// </summary>
        /// <value>The material cost.</value>
        [DataMember(Name="materialCost", EmitDefaultValue=false)]
        public double? MaterialCost { get; set; }

        /// <summary>
        /// The material op cost.
        /// </summary>
        /// <value>The material op cost.</value>
        [DataMember(Name="materialOpCost", EmitDefaultValue=false)]
        public double? MaterialOpCost { get; set; }

        /// <summary>
        /// The labor cost.
        /// </summary>
        /// <value>The labor cost.</value>
        [DataMember(Name="laborCost", EmitDefaultValue=false)]
        public double? LaborCost { get; set; }

        /// <summary>
        /// The labor op cost.
        /// </summary>
        /// <value>The labor op cost.</value>
        [DataMember(Name="laborOpCost", EmitDefaultValue=false)]
        public double? LaborOpCost { get; set; }

        /// <summary>
        /// The equipment cost.
        /// </summary>
        /// <value>The equipment cost.</value>
        [DataMember(Name="equipmentCost", EmitDefaultValue=false)]
        public double? EquipmentCost { get; set; }

        /// <summary>
        /// The equipment op cost.
        /// </summary>
        /// <value>The equipment op cost.</value>
        [DataMember(Name="equipmentOpCost", EmitDefaultValue=false)]
        public double? EquipmentOpCost { get; set; }

        /// <summary>
        /// The total cost.
        /// </summary>
        /// <value>The total cost.</value>
        [DataMember(Name="totalCost", EmitDefaultValue=false)]
        public double? TotalCost { get; set; }

        /// <summary>
        /// The total op cost.
        /// </summary>
        /// <value>The total op cost.</value>
        [DataMember(Name="totalOpCost", EmitDefaultValue=false)]
        public double? TotalOpCost { get; set; }

        /// <summary>
        /// The labor InHouse cost.
        /// </summary>
        /// <value>The labor InHouse cost.</value>
        [DataMember(Name="laborCostInHouse", EmitDefaultValue=false)]
        public double? LaborCostInHouse { get; set; }

        /// <summary>
        /// The Equipment InHouse cost.
        /// </summary>
        /// <value>The Equipment InHouse cost.</value>
        [DataMember(Name="equipmentCostInHouse", EmitDefaultValue=false)]
        public double? EquipmentCostInHouse { get; set; }

        /// <summary>
        /// The Material InHouse cost.
        /// </summary>
        /// <value>The Material InHouse cost.</value>
        [DataMember(Name="materialCostInHouse", EmitDefaultValue=false)]
        public double? MaterialCostInHouse { get; set; }

        /// <summary>
        /// The Total InHouse cost.
        /// </summary>
        /// <value>The Total InHouse cost.</value>
        [DataMember(Name="totalCostInHouse", EmitDefaultValue=false)]
        public double? TotalCostInHouse { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AssemblyLineCostData {\n");
            sb.Append("  InstallCost: ").Append(InstallCost).Append("\n");
            sb.Append("  InstallOpCost: ").Append(InstallOpCost).Append("\n");
            sb.Append("  TotalInHouseCost: ").Append(TotalInHouseCost).Append("\n");
            sb.Append("  MaterialCost: ").Append(MaterialCost).Append("\n");
            sb.Append("  MaterialOpCost: ").Append(MaterialOpCost).Append("\n");
            sb.Append("  LaborCost: ").Append(LaborCost).Append("\n");
            sb.Append("  LaborOpCost: ").Append(LaborOpCost).Append("\n");
            sb.Append("  EquipmentCost: ").Append(EquipmentCost).Append("\n");
            sb.Append("  EquipmentOpCost: ").Append(EquipmentOpCost).Append("\n");
            sb.Append("  TotalCost: ").Append(TotalCost).Append("\n");
            sb.Append("  TotalOpCost: ").Append(TotalOpCost).Append("\n");
            sb.Append("  LaborCostInHouse: ").Append(LaborCostInHouse).Append("\n");
            sb.Append("  EquipmentCostInHouse: ").Append(EquipmentCostInHouse).Append("\n");
            sb.Append("  MaterialCostInHouse: ").Append(MaterialCostInHouse).Append("\n");
            sb.Append("  TotalCostInHouse: ").Append(TotalCostInHouse).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AssemblyLineCostData);
        }

        /// <summary>
        /// Returns true if AssemblyLineCostData instances are equal
        /// </summary>
        /// <param name="input">Instance of AssemblyLineCostData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssemblyLineCostData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InstallCost == input.InstallCost ||
                    (this.InstallCost != null &&
                    this.InstallCost.Equals(input.InstallCost))
                ) && 
                (
                    this.InstallOpCost == input.InstallOpCost ||
                    (this.InstallOpCost != null &&
                    this.InstallOpCost.Equals(input.InstallOpCost))
                ) && 
                (
                    this.TotalInHouseCost == input.TotalInHouseCost ||
                    (this.TotalInHouseCost != null &&
                    this.TotalInHouseCost.Equals(input.TotalInHouseCost))
                ) && 
                (
                    this.MaterialCost == input.MaterialCost ||
                    (this.MaterialCost != null &&
                    this.MaterialCost.Equals(input.MaterialCost))
                ) && 
                (
                    this.MaterialOpCost == input.MaterialOpCost ||
                    (this.MaterialOpCost != null &&
                    this.MaterialOpCost.Equals(input.MaterialOpCost))
                ) && 
                (
                    this.LaborCost == input.LaborCost ||
                    (this.LaborCost != null &&
                    this.LaborCost.Equals(input.LaborCost))
                ) && 
                (
                    this.LaborOpCost == input.LaborOpCost ||
                    (this.LaborOpCost != null &&
                    this.LaborOpCost.Equals(input.LaborOpCost))
                ) && 
                (
                    this.EquipmentCost == input.EquipmentCost ||
                    (this.EquipmentCost != null &&
                    this.EquipmentCost.Equals(input.EquipmentCost))
                ) && 
                (
                    this.EquipmentOpCost == input.EquipmentOpCost ||
                    (this.EquipmentOpCost != null &&
                    this.EquipmentOpCost.Equals(input.EquipmentOpCost))
                ) && 
                (
                    this.TotalCost == input.TotalCost ||
                    (this.TotalCost != null &&
                    this.TotalCost.Equals(input.TotalCost))
                ) && 
                (
                    this.TotalOpCost == input.TotalOpCost ||
                    (this.TotalOpCost != null &&
                    this.TotalOpCost.Equals(input.TotalOpCost))
                ) && 
                (
                    this.LaborCostInHouse == input.LaborCostInHouse ||
                    (this.LaborCostInHouse != null &&
                    this.LaborCostInHouse.Equals(input.LaborCostInHouse))
                ) && 
                (
                    this.EquipmentCostInHouse == input.EquipmentCostInHouse ||
                    (this.EquipmentCostInHouse != null &&
                    this.EquipmentCostInHouse.Equals(input.EquipmentCostInHouse))
                ) && 
                (
                    this.MaterialCostInHouse == input.MaterialCostInHouse ||
                    (this.MaterialCostInHouse != null &&
                    this.MaterialCostInHouse.Equals(input.MaterialCostInHouse))
                ) && 
                (
                    this.TotalCostInHouse == input.TotalCostInHouse ||
                    (this.TotalCostInHouse != null &&
                    this.TotalCostInHouse.Equals(input.TotalCostInHouse))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InstallCost != null)
                    hashCode = hashCode * 59 + this.InstallCost.GetHashCode();
                if (this.InstallOpCost != null)
                    hashCode = hashCode * 59 + this.InstallOpCost.GetHashCode();
                if (this.TotalInHouseCost != null)
                    hashCode = hashCode * 59 + this.TotalInHouseCost.GetHashCode();
                if (this.MaterialCost != null)
                    hashCode = hashCode * 59 + this.MaterialCost.GetHashCode();
                if (this.MaterialOpCost != null)
                    hashCode = hashCode * 59 + this.MaterialOpCost.GetHashCode();
                if (this.LaborCost != null)
                    hashCode = hashCode * 59 + this.LaborCost.GetHashCode();
                if (this.LaborOpCost != null)
                    hashCode = hashCode * 59 + this.LaborOpCost.GetHashCode();
                if (this.EquipmentCost != null)
                    hashCode = hashCode * 59 + this.EquipmentCost.GetHashCode();
                if (this.EquipmentOpCost != null)
                    hashCode = hashCode * 59 + this.EquipmentOpCost.GetHashCode();
                if (this.TotalCost != null)
                    hashCode = hashCode * 59 + this.TotalCost.GetHashCode();
                if (this.TotalOpCost != null)
                    hashCode = hashCode * 59 + this.TotalOpCost.GetHashCode();
                if (this.LaborCostInHouse != null)
                    hashCode = hashCode * 59 + this.LaborCostInHouse.GetHashCode();
                if (this.EquipmentCostInHouse != null)
                    hashCode = hashCode * 59 + this.EquipmentCostInHouse.GetHashCode();
                if (this.MaterialCostInHouse != null)
                    hashCode = hashCode * 59 + this.MaterialCostInHouse.GetHashCode();
                if (this.TotalCostInHouse != null)
                    hashCode = hashCode * 59 + this.TotalCostInHouse.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
