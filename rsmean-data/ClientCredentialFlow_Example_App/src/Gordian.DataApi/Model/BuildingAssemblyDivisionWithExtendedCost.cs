/* 
 * RSMeans Consumer REST API V1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Gordian.DataApi.Model
{
    /// <summary>
    /// BuildingAssemblyDivisionWithExtendedCost
    /// </summary>
    [DataContract]
    public partial class BuildingAssemblyDivisionWithExtendedCost :  IEquatable<BuildingAssemblyDivisionWithExtendedCost>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BuildingAssemblyDivisionWithExtendedCost" /> class.
        /// </summary>
        /// <param name="code">code.</param>
        /// <param name="description">description.</param>
        /// <param name="costs">costs.</param>
        /// <param name="tradeUsages">tradeUsages.</param>
        public BuildingAssemblyDivisionWithExtendedCost(string code = default(string), string description = default(string), ExtendedCost costs = default(ExtendedCost), List<TradeUsage> tradeUsages = default(List<TradeUsage>))
        {
            this.Code = code;
            this.Description = description;
            this.Costs = costs;
            this.TradeUsages = tradeUsages;
        }
        
        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Costs
        /// </summary>
        [DataMember(Name="costs", EmitDefaultValue=false)]
        public ExtendedCost Costs { get; set; }

        /// <summary>
        /// Gets or Sets TradeUsages
        /// </summary>
        [DataMember(Name="tradeUsages", EmitDefaultValue=false)]
        public List<TradeUsage> TradeUsages { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BuildingAssemblyDivisionWithExtendedCost {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Costs: ").Append(Costs).Append("\n");
            sb.Append("  TradeUsages: ").Append(TradeUsages).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BuildingAssemblyDivisionWithExtendedCost);
        }

        /// <summary>
        /// Returns true if BuildingAssemblyDivisionWithExtendedCost instances are equal
        /// </summary>
        /// <param name="input">Instance of BuildingAssemblyDivisionWithExtendedCost to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BuildingAssemblyDivisionWithExtendedCost input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Costs == input.Costs ||
                    (this.Costs != null &&
                    this.Costs.Equals(input.Costs))
                ) && 
                (
                    this.TradeUsages == input.TradeUsages ||
                    this.TradeUsages != null &&
                    this.TradeUsages.SequenceEqual(input.TradeUsages)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Costs != null)
                    hashCode = hashCode * 59 + this.Costs.GetHashCode();
                if (this.TradeUsages != null)
                    hashCode = hashCode * 59 + this.TradeUsages.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
