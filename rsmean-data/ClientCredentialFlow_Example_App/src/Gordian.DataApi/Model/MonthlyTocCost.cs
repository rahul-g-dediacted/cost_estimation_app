/* 
 * RSMeans Consumer REST API V1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Gordian.DataApi.Model
{
    /// <summary>
    /// Aggregated monthly toc cost
    /// </summary>
    [DataContract]
    public partial class MonthlyTocCost :  IEquatable<MonthlyTocCost>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MonthlyTocCost" /> class.
        /// </summary>
        /// <param name="materialCost">materialCost.</param>
        /// <param name="laborCost">laborCost.</param>
        /// <param name="equipmentCost">equipmentCost.</param>
        /// <param name="tradeUsages">tradeUsages.</param>
        public MonthlyTocCost(double? materialCost = default(double?), double? laborCost = default(double?), double? equipmentCost = default(double?), List<TradeUsage> tradeUsages = default(List<TradeUsage>))
        {
            this.MaterialCost = materialCost;
            this.LaborCost = laborCost;
            this.EquipmentCost = equipmentCost;
            this.TradeUsages = tradeUsages;
        }
        
        /// <summary>
        /// Gets or Sets Year
        /// </summary>
        [DataMember(Name="year", EmitDefaultValue=false)]
        public int? Year { get; private set; }

        /// <summary>
        /// Gets or Sets Month
        /// </summary>
        [DataMember(Name="month", EmitDefaultValue=false)]
        public int? Month { get; private set; }

        /// <summary>
        /// Gets or Sets MonthDescription
        /// </summary>
        [DataMember(Name="monthDescription", EmitDefaultValue=false)]
        public string MonthDescription { get; private set; }

        /// <summary>
        /// Gets or Sets MaterialCost
        /// </summary>
        [DataMember(Name="materialCost", EmitDefaultValue=false)]
        public double? MaterialCost { get; set; }

        /// <summary>
        /// Gets or Sets LaborCost
        /// </summary>
        [DataMember(Name="laborCost", EmitDefaultValue=false)]
        public double? LaborCost { get; set; }

        /// <summary>
        /// Gets or Sets EquipmentCost
        /// </summary>
        [DataMember(Name="equipmentCost", EmitDefaultValue=false)]
        public double? EquipmentCost { get; set; }

        /// <summary>
        /// Gets or Sets TradeUsages
        /// </summary>
        [DataMember(Name="tradeUsages", EmitDefaultValue=false)]
        public List<TradeUsage> TradeUsages { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MonthlyTocCost {\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  Month: ").Append(Month).Append("\n");
            sb.Append("  MonthDescription: ").Append(MonthDescription).Append("\n");
            sb.Append("  MaterialCost: ").Append(MaterialCost).Append("\n");
            sb.Append("  LaborCost: ").Append(LaborCost).Append("\n");
            sb.Append("  EquipmentCost: ").Append(EquipmentCost).Append("\n");
            sb.Append("  TradeUsages: ").Append(TradeUsages).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MonthlyTocCost);
        }

        /// <summary>
        /// Returns true if MonthlyTocCost instances are equal
        /// </summary>
        /// <param name="input">Instance of MonthlyTocCost to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MonthlyTocCost input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Year == input.Year ||
                    (this.Year != null &&
                    this.Year.Equals(input.Year))
                ) && 
                (
                    this.Month == input.Month ||
                    (this.Month != null &&
                    this.Month.Equals(input.Month))
                ) && 
                (
                    this.MonthDescription == input.MonthDescription ||
                    (this.MonthDescription != null &&
                    this.MonthDescription.Equals(input.MonthDescription))
                ) && 
                (
                    this.MaterialCost == input.MaterialCost ||
                    (this.MaterialCost != null &&
                    this.MaterialCost.Equals(input.MaterialCost))
                ) && 
                (
                    this.LaborCost == input.LaborCost ||
                    (this.LaborCost != null &&
                    this.LaborCost.Equals(input.LaborCost))
                ) && 
                (
                    this.EquipmentCost == input.EquipmentCost ||
                    (this.EquipmentCost != null &&
                    this.EquipmentCost.Equals(input.EquipmentCost))
                ) && 
                (
                    this.TradeUsages == input.TradeUsages ||
                    this.TradeUsages != null &&
                    this.TradeUsages.SequenceEqual(input.TradeUsages)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Year != null)
                    hashCode = hashCode * 59 + this.Year.GetHashCode();
                if (this.Month != null)
                    hashCode = hashCode * 59 + this.Month.GetHashCode();
                if (this.MonthDescription != null)
                    hashCode = hashCode * 59 + this.MonthDescription.GetHashCode();
                if (this.MaterialCost != null)
                    hashCode = hashCode * 59 + this.MaterialCost.GetHashCode();
                if (this.LaborCost != null)
                    hashCode = hashCode * 59 + this.LaborCost.GetHashCode();
                if (this.EquipmentCost != null)
                    hashCode = hashCode * 59 + this.EquipmentCost.GetHashCode();
                if (this.TradeUsages != null)
                    hashCode = hashCode * 59 + this.TradeUsages.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
