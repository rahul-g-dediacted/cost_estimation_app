/* 
 * RSMeans Consumer REST API V1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Gordian.DataApi.Model
{
    /// <summary>
    /// ExtendedDetailedCost
    /// </summary>
    [DataContract]
    public partial class ExtendedDetailedCost :  IEquatable<ExtendedDetailedCost>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExtendedDetailedCost" /> class.
        /// </summary>
        /// <param name="bareCost">bareCost.</param>
        /// <param name="bareCostPerSquareFoot">bareCostPerSquareFoot.</param>
        /// <param name="percentOfTotal">percentOfTotal.</param>
        public ExtendedDetailedCost(double? bareCost = default(double?), double? bareCostPerSquareFoot = default(double?), double? percentOfTotal = default(double?))
        {
            this.BareCost = bareCost;
            this.BareCostPerSquareFoot = bareCostPerSquareFoot;
            this.PercentOfTotal = percentOfTotal;
        }
        
        /// <summary>
        /// Gets or Sets BareCost
        /// </summary>
        [DataMember(Name="bareCost", EmitDefaultValue=false)]
        public double? BareCost { get; set; }

        /// <summary>
        /// Gets or Sets BareCostPerSquareFoot
        /// </summary>
        [DataMember(Name="bareCostPerSquareFoot", EmitDefaultValue=false)]
        public double? BareCostPerSquareFoot { get; set; }

        /// <summary>
        /// Gets or Sets PercentOfTotal
        /// </summary>
        [DataMember(Name="percentOfTotal", EmitDefaultValue=false)]
        public double? PercentOfTotal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExtendedDetailedCost {\n");
            sb.Append("  BareCost: ").Append(BareCost).Append("\n");
            sb.Append("  BareCostPerSquareFoot: ").Append(BareCostPerSquareFoot).Append("\n");
            sb.Append("  PercentOfTotal: ").Append(PercentOfTotal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExtendedDetailedCost);
        }

        /// <summary>
        /// Returns true if ExtendedDetailedCost instances are equal
        /// </summary>
        /// <param name="input">Instance of ExtendedDetailedCost to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExtendedDetailedCost input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BareCost == input.BareCost ||
                    (this.BareCost != null &&
                    this.BareCost.Equals(input.BareCost))
                ) && 
                (
                    this.BareCostPerSquareFoot == input.BareCostPerSquareFoot ||
                    (this.BareCostPerSquareFoot != null &&
                    this.BareCostPerSquareFoot.Equals(input.BareCostPerSquareFoot))
                ) && 
                (
                    this.PercentOfTotal == input.PercentOfTotal ||
                    (this.PercentOfTotal != null &&
                    this.PercentOfTotal.Equals(input.PercentOfTotal))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BareCost != null)
                    hashCode = hashCode * 59 + this.BareCost.GetHashCode();
                if (this.BareCostPerSquareFoot != null)
                    hashCode = hashCode * 59 + this.BareCostPerSquareFoot.GetHashCode();
                if (this.PercentOfTotal != null)
                    hashCode = hashCode * 59 + this.PercentOfTotal.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
