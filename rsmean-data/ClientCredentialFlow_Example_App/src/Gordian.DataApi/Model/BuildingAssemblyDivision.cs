/* 
 * RSMeans Consumer REST API V1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Gordian.DataApi.Model
{
    /// <summary>
    /// BuildingAssemblyDivision
    /// </summary>
    [DataContract]
    public partial class BuildingAssemblyDivision :  IEquatable<BuildingAssemblyDivision>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BuildingAssemblyDivision" /> class.
        /// </summary>
        /// <param name="code">code.</param>
        /// <param name="description">description.</param>
        /// <param name="cost">cost.</param>
        /// <param name="costPerSquareFoot">costPerSquareFoot.</param>
        /// <param name="percentOfTotal">percentOfTotal.</param>
        public BuildingAssemblyDivision(string code = default(string), string description = default(string), double? cost = default(double?), double? costPerSquareFoot = default(double?), double? percentOfTotal = default(double?))
        {
            this.Code = code;
            this.Description = description;
            this.Cost = cost;
            this.CostPerSquareFoot = costPerSquareFoot;
            this.PercentOfTotal = percentOfTotal;
        }
        
        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Cost
        /// </summary>
        [DataMember(Name="cost", EmitDefaultValue=false)]
        public double? Cost { get; set; }

        /// <summary>
        /// Gets or Sets CostPerSquareFoot
        /// </summary>
        [DataMember(Name="costPerSquareFoot", EmitDefaultValue=false)]
        public double? CostPerSquareFoot { get; set; }

        /// <summary>
        /// Gets or Sets PercentOfTotal
        /// </summary>
        [DataMember(Name="percentOfTotal", EmitDefaultValue=false)]
        public double? PercentOfTotal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BuildingAssemblyDivision {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  CostPerSquareFoot: ").Append(CostPerSquareFoot).Append("\n");
            sb.Append("  PercentOfTotal: ").Append(PercentOfTotal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BuildingAssemblyDivision);
        }

        /// <summary>
        /// Returns true if BuildingAssemblyDivision instances are equal
        /// </summary>
        /// <param name="input">Instance of BuildingAssemblyDivision to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BuildingAssemblyDivision input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Cost == input.Cost ||
                    (this.Cost != null &&
                    this.Cost.Equals(input.Cost))
                ) && 
                (
                    this.CostPerSquareFoot == input.CostPerSquareFoot ||
                    (this.CostPerSquareFoot != null &&
                    this.CostPerSquareFoot.Equals(input.CostPerSquareFoot))
                ) && 
                (
                    this.PercentOfTotal == input.PercentOfTotal ||
                    (this.PercentOfTotal != null &&
                    this.PercentOfTotal.Equals(input.PercentOfTotal))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Cost != null)
                    hashCode = hashCode * 59 + this.Cost.GetHashCode();
                if (this.CostPerSquareFoot != null)
                    hashCode = hashCode * 59 + this.CostPerSquareFoot.GetHashCode();
                if (this.PercentOfTotal != null)
                    hashCode = hashCode * 59 + this.PercentOfTotal.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
