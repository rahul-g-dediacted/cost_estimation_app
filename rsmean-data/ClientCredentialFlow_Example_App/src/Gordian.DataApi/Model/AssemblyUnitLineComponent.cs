/* 
 * RSMeans Consumer REST API V1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Gordian.DataApi.Model
{
    /// <summary>
    /// AssemblyUnitLineComponent
    /// </summary>
    [DataContract]
    public partial class AssemblyUnitLineComponent :  IEquatable<AssemblyUnitLineComponent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AssemblyUnitLineComponent" /> class.
        /// </summary>
        /// <param name="catalog">catalog.</param>
        /// <param name="assemblyLine">assemblyLine.</param>
        /// <param name="quantity">quantity.</param>
        /// <param name="id">id.</param>
        /// <param name="unitLineNumber">unitLineNumber.</param>
        /// <param name="unitOfMeasure">unitOfMeasure.</param>
        /// <param name="description">description.</param>
        /// <param name="unitCosts">unitCosts.</param>
        /// <param name="calculatedCosts">calculatedCosts.</param>
        /// <param name="unitLine">unitLine.</param>
        public AssemblyUnitLineComponent(ReferenceAssemblyCatalog catalog = default(ReferenceAssemblyCatalog), ReferenceAssemblyCostLine assemblyLine = default(ReferenceAssemblyCostLine), double? quantity = default(double?), string id = default(string), string unitLineNumber = default(string), string unitOfMeasure = default(string), string description = default(string), UnitLineCostData unitCosts = default(UnitLineCostData), UnitLineCostData calculatedCosts = default(UnitLineCostData), ReferenceUnitCostLine unitLine = default(ReferenceUnitCostLine))
        {
            this.Catalog = catalog;
            this.AssemblyLine = assemblyLine;
            this.Quantity = quantity;
            this.Id = id;
            this.UnitLineNumber = unitLineNumber;
            this.UnitOfMeasure = unitOfMeasure;
            this.Description = description;
            this.UnitCosts = unitCosts;
            this.CalculatedCosts = calculatedCosts;
            this.UnitLine = unitLine;
        }
        
        /// <summary>
        /// Gets or Sets Catalog
        /// </summary>
        [DataMember(Name="catalog", EmitDefaultValue=false)]
        public ReferenceAssemblyCatalog Catalog { get; set; }

        /// <summary>
        /// Gets or Sets AssemblyLine
        /// </summary>
        [DataMember(Name="assemblyLine", EmitDefaultValue=false)]
        public ReferenceAssemblyCostLine AssemblyLine { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public double? Quantity { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets UnitLineNumber
        /// </summary>
        [DataMember(Name="unitLineNumber", EmitDefaultValue=false)]
        public string UnitLineNumber { get; set; }

        /// <summary>
        /// Gets or Sets UnitOfMeasure
        /// </summary>
        [DataMember(Name="unitOfMeasure", EmitDefaultValue=false)]
        public string UnitOfMeasure { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets UnitCosts
        /// </summary>
        [DataMember(Name="unitCosts", EmitDefaultValue=false)]
        public UnitLineCostData UnitCosts { get; set; }

        /// <summary>
        /// Gets or Sets CalculatedCosts
        /// </summary>
        [DataMember(Name="calculatedCosts", EmitDefaultValue=false)]
        public UnitLineCostData CalculatedCosts { get; set; }

        /// <summary>
        /// Gets or Sets UnitLine
        /// </summary>
        [DataMember(Name="unitLine", EmitDefaultValue=false)]
        public ReferenceUnitCostLine UnitLine { get; set; }

        /// <summary>
        /// Gets or Sets Href
        /// </summary>
        [DataMember(Name="href", EmitDefaultValue=false)]
        public string Href { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AssemblyUnitLineComponent {\n");
            sb.Append("  Catalog: ").Append(Catalog).Append("\n");
            sb.Append("  AssemblyLine: ").Append(AssemblyLine).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UnitLineNumber: ").Append(UnitLineNumber).Append("\n");
            sb.Append("  UnitOfMeasure: ").Append(UnitOfMeasure).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  UnitCosts: ").Append(UnitCosts).Append("\n");
            sb.Append("  CalculatedCosts: ").Append(CalculatedCosts).Append("\n");
            sb.Append("  UnitLine: ").Append(UnitLine).Append("\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AssemblyUnitLineComponent);
        }

        /// <summary>
        /// Returns true if AssemblyUnitLineComponent instances are equal
        /// </summary>
        /// <param name="input">Instance of AssemblyUnitLineComponent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssemblyUnitLineComponent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Catalog == input.Catalog ||
                    (this.Catalog != null &&
                    this.Catalog.Equals(input.Catalog))
                ) && 
                (
                    this.AssemblyLine == input.AssemblyLine ||
                    (this.AssemblyLine != null &&
                    this.AssemblyLine.Equals(input.AssemblyLine))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.UnitLineNumber == input.UnitLineNumber ||
                    (this.UnitLineNumber != null &&
                    this.UnitLineNumber.Equals(input.UnitLineNumber))
                ) && 
                (
                    this.UnitOfMeasure == input.UnitOfMeasure ||
                    (this.UnitOfMeasure != null &&
                    this.UnitOfMeasure.Equals(input.UnitOfMeasure))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.UnitCosts == input.UnitCosts ||
                    (this.UnitCosts != null &&
                    this.UnitCosts.Equals(input.UnitCosts))
                ) && 
                (
                    this.CalculatedCosts == input.CalculatedCosts ||
                    (this.CalculatedCosts != null &&
                    this.CalculatedCosts.Equals(input.CalculatedCosts))
                ) && 
                (
                    this.UnitLine == input.UnitLine ||
                    (this.UnitLine != null &&
                    this.UnitLine.Equals(input.UnitLine))
                ) && 
                (
                    this.Href == input.Href ||
                    (this.Href != null &&
                    this.Href.Equals(input.Href))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Catalog != null)
                    hashCode = hashCode * 59 + this.Catalog.GetHashCode();
                if (this.AssemblyLine != null)
                    hashCode = hashCode * 59 + this.AssemblyLine.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.UnitLineNumber != null)
                    hashCode = hashCode * 59 + this.UnitLineNumber.GetHashCode();
                if (this.UnitOfMeasure != null)
                    hashCode = hashCode * 59 + this.UnitOfMeasure.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.UnitCosts != null)
                    hashCode = hashCode * 59 + this.UnitCosts.GetHashCode();
                if (this.CalculatedCosts != null)
                    hashCode = hashCode * 59 + this.CalculatedCosts.GetHashCode();
                if (this.UnitLine != null)
                    hashCode = hashCode * 59 + this.UnitLine.GetHashCode();
                if (this.Href != null)
                    hashCode = hashCode * 59 + this.Href.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
