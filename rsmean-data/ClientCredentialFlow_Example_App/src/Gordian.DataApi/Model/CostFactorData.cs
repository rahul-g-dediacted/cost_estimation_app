/* 
 * RSMeans Consumer REST API V1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Gordian.DataApi.Model
{
    /// <summary>
    /// CostFactor Data.
    /// </summary>
    [DataContract]
    public partial class CostFactorData :  IEquatable<CostFactorData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CostFactorData" /> class.
        /// </summary>
        /// <param name="costFactorKey">The cci key..</param>
        /// <param name="materialCostFactor">The material cost factor..</param>
        /// <param name="equipmentCostFactor">The equipment cost factor..</param>
        /// <param name="installationCostFactor">The installation cost factor..</param>
        /// <param name="totalCostFactor">The total cost factor..</param>
        public CostFactorData(string costFactorKey = default(string), double? materialCostFactor = default(double?), double? equipmentCostFactor = default(double?), double? installationCostFactor = default(double?), double? totalCostFactor = default(double?))
        {
            this.CostFactorKey = costFactorKey;
            this.MaterialCostFactor = materialCostFactor;
            this.EquipmentCostFactor = equipmentCostFactor;
            this.InstallationCostFactor = installationCostFactor;
            this.TotalCostFactor = totalCostFactor;
        }
        
        /// <summary>
        /// The cci key.
        /// </summary>
        /// <value>The cci key.</value>
        [DataMember(Name="costFactorKey", EmitDefaultValue=false)]
        public string CostFactorKey { get; set; }

        /// <summary>
        /// The material cost factor.
        /// </summary>
        /// <value>The material cost factor.</value>
        [DataMember(Name="materialCostFactor", EmitDefaultValue=false)]
        public double? MaterialCostFactor { get; set; }

        /// <summary>
        /// The equipment cost factor.
        /// </summary>
        /// <value>The equipment cost factor.</value>
        [DataMember(Name="equipmentCostFactor", EmitDefaultValue=false)]
        public double? EquipmentCostFactor { get; set; }

        /// <summary>
        /// The installation cost factor.
        /// </summary>
        /// <value>The installation cost factor.</value>
        [DataMember(Name="installationCostFactor", EmitDefaultValue=false)]
        public double? InstallationCostFactor { get; set; }

        /// <summary>
        /// The total cost factor.
        /// </summary>
        /// <value>The total cost factor.</value>
        [DataMember(Name="totalCostFactor", EmitDefaultValue=false)]
        public double? TotalCostFactor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CostFactorData {\n");
            sb.Append("  CostFactorKey: ").Append(CostFactorKey).Append("\n");
            sb.Append("  MaterialCostFactor: ").Append(MaterialCostFactor).Append("\n");
            sb.Append("  EquipmentCostFactor: ").Append(EquipmentCostFactor).Append("\n");
            sb.Append("  InstallationCostFactor: ").Append(InstallationCostFactor).Append("\n");
            sb.Append("  TotalCostFactor: ").Append(TotalCostFactor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CostFactorData);
        }

        /// <summary>
        /// Returns true if CostFactorData instances are equal
        /// </summary>
        /// <param name="input">Instance of CostFactorData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CostFactorData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CostFactorKey == input.CostFactorKey ||
                    (this.CostFactorKey != null &&
                    this.CostFactorKey.Equals(input.CostFactorKey))
                ) && 
                (
                    this.MaterialCostFactor == input.MaterialCostFactor ||
                    (this.MaterialCostFactor != null &&
                    this.MaterialCostFactor.Equals(input.MaterialCostFactor))
                ) && 
                (
                    this.EquipmentCostFactor == input.EquipmentCostFactor ||
                    (this.EquipmentCostFactor != null &&
                    this.EquipmentCostFactor.Equals(input.EquipmentCostFactor))
                ) && 
                (
                    this.InstallationCostFactor == input.InstallationCostFactor ||
                    (this.InstallationCostFactor != null &&
                    this.InstallationCostFactor.Equals(input.InstallationCostFactor))
                ) && 
                (
                    this.TotalCostFactor == input.TotalCostFactor ||
                    (this.TotalCostFactor != null &&
                    this.TotalCostFactor.Equals(input.TotalCostFactor))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CostFactorKey != null)
                    hashCode = hashCode * 59 + this.CostFactorKey.GetHashCode();
                if (this.MaterialCostFactor != null)
                    hashCode = hashCode * 59 + this.MaterialCostFactor.GetHashCode();
                if (this.EquipmentCostFactor != null)
                    hashCode = hashCode * 59 + this.EquipmentCostFactor.GetHashCode();
                if (this.InstallationCostFactor != null)
                    hashCode = hashCode * 59 + this.InstallationCostFactor.GetHashCode();
                if (this.TotalCostFactor != null)
                    hashCode = hashCode * 59 + this.TotalCostFactor.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
