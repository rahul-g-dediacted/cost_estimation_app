/* 
 * RSMeans Consumer REST API V1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Gordian.DataApi.Model
{
    /// <summary>
    /// Breakpoint.
    /// </summary>
    [DataContract]
    public partial class Breakpoint :  IEquatable<Breakpoint>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Breakpoint" /> class.
        /// </summary>
        /// <param name="id">The breakpoint identifier..</param>
        /// <param name="releaseId">The release identifier..</param>
        /// <param name="description">The description..</param>
        /// <param name="breakpointTimesNumber">The breakpoint times number..</param>
        /// <param name="dailyOutputFactor">The daily output factor..</param>
        /// <param name="laborHourFactor">The labor hour factor..</param>
        /// <param name="materialCostFactor">The material cost factor..</param>
        /// <param name="laborCostFactor">The labor cost factor..</param>
        /// <param name="equipmentCostFactor">The equipment cost factor..</param>
        public Breakpoint(string id = default(string), string releaseId = default(string), string description = default(string), int? breakpointTimesNumber = default(int?), double? dailyOutputFactor = default(double?), double? laborHourFactor = default(double?), double? materialCostFactor = default(double?), double? laborCostFactor = default(double?), double? equipmentCostFactor = default(double?))
        {
            this.Id = id;
            this.ReleaseId = releaseId;
            this.Description = description;
            this.BreakpointTimesNumber = breakpointTimesNumber;
            this.DailyOutputFactor = dailyOutputFactor;
            this.LaborHourFactor = laborHourFactor;
            this.MaterialCostFactor = materialCostFactor;
            this.LaborCostFactor = laborCostFactor;
            this.EquipmentCostFactor = equipmentCostFactor;
        }
        
        /// <summary>
        /// The breakpoint identifier.
        /// </summary>
        /// <value>The breakpoint identifier.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The release identifier.
        /// </summary>
        /// <value>The release identifier.</value>
        [DataMember(Name="releaseId", EmitDefaultValue=false)]
        public string ReleaseId { get; set; }

        /// <summary>
        /// The description.
        /// </summary>
        /// <value>The description.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The breakpoint times number.
        /// </summary>
        /// <value>The breakpoint times number.</value>
        [DataMember(Name="breakpointTimesNumber", EmitDefaultValue=false)]
        public int? BreakpointTimesNumber { get; set; }

        /// <summary>
        /// The daily output factor.
        /// </summary>
        /// <value>The daily output factor.</value>
        [DataMember(Name="dailyOutputFactor", EmitDefaultValue=false)]
        public double? DailyOutputFactor { get; set; }

        /// <summary>
        /// The labor hour factor.
        /// </summary>
        /// <value>The labor hour factor.</value>
        [DataMember(Name="laborHourFactor", EmitDefaultValue=false)]
        public double? LaborHourFactor { get; set; }

        /// <summary>
        /// The material cost factor.
        /// </summary>
        /// <value>The material cost factor.</value>
        [DataMember(Name="materialCostFactor", EmitDefaultValue=false)]
        public double? MaterialCostFactor { get; set; }

        /// <summary>
        /// The labor cost factor.
        /// </summary>
        /// <value>The labor cost factor.</value>
        [DataMember(Name="laborCostFactor", EmitDefaultValue=false)]
        public double? LaborCostFactor { get; set; }

        /// <summary>
        /// The equipment cost factor.
        /// </summary>
        /// <value>The equipment cost factor.</value>
        [DataMember(Name="equipmentCostFactor", EmitDefaultValue=false)]
        public double? EquipmentCostFactor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Breakpoint {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ReleaseId: ").Append(ReleaseId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  BreakpointTimesNumber: ").Append(BreakpointTimesNumber).Append("\n");
            sb.Append("  DailyOutputFactor: ").Append(DailyOutputFactor).Append("\n");
            sb.Append("  LaborHourFactor: ").Append(LaborHourFactor).Append("\n");
            sb.Append("  MaterialCostFactor: ").Append(MaterialCostFactor).Append("\n");
            sb.Append("  LaborCostFactor: ").Append(LaborCostFactor).Append("\n");
            sb.Append("  EquipmentCostFactor: ").Append(EquipmentCostFactor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Breakpoint);
        }

        /// <summary>
        /// Returns true if Breakpoint instances are equal
        /// </summary>
        /// <param name="input">Instance of Breakpoint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Breakpoint input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ReleaseId == input.ReleaseId ||
                    (this.ReleaseId != null &&
                    this.ReleaseId.Equals(input.ReleaseId))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.BreakpointTimesNumber == input.BreakpointTimesNumber ||
                    (this.BreakpointTimesNumber != null &&
                    this.BreakpointTimesNumber.Equals(input.BreakpointTimesNumber))
                ) && 
                (
                    this.DailyOutputFactor == input.DailyOutputFactor ||
                    (this.DailyOutputFactor != null &&
                    this.DailyOutputFactor.Equals(input.DailyOutputFactor))
                ) && 
                (
                    this.LaborHourFactor == input.LaborHourFactor ||
                    (this.LaborHourFactor != null &&
                    this.LaborHourFactor.Equals(input.LaborHourFactor))
                ) && 
                (
                    this.MaterialCostFactor == input.MaterialCostFactor ||
                    (this.MaterialCostFactor != null &&
                    this.MaterialCostFactor.Equals(input.MaterialCostFactor))
                ) && 
                (
                    this.LaborCostFactor == input.LaborCostFactor ||
                    (this.LaborCostFactor != null &&
                    this.LaborCostFactor.Equals(input.LaborCostFactor))
                ) && 
                (
                    this.EquipmentCostFactor == input.EquipmentCostFactor ||
                    (this.EquipmentCostFactor != null &&
                    this.EquipmentCostFactor.Equals(input.EquipmentCostFactor))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ReleaseId != null)
                    hashCode = hashCode * 59 + this.ReleaseId.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.BreakpointTimesNumber != null)
                    hashCode = hashCode * 59 + this.BreakpointTimesNumber.GetHashCode();
                if (this.DailyOutputFactor != null)
                    hashCode = hashCode * 59 + this.DailyOutputFactor.GetHashCode();
                if (this.LaborHourFactor != null)
                    hashCode = hashCode * 59 + this.LaborHourFactor.GetHashCode();
                if (this.MaterialCostFactor != null)
                    hashCode = hashCode * 59 + this.MaterialCostFactor.GetHashCode();
                if (this.LaborCostFactor != null)
                    hashCode = hashCode * 59 + this.LaborCostFactor.GetHashCode();
                if (this.EquipmentCostFactor != null)
                    hashCode = hashCode * 59 + this.EquipmentCostFactor.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
