/* 
 * RSMeans Consumer REST API V1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Gordian.DataApi.Model
{
    /// <summary>
    /// Building Fees
    /// </summary>
    [DataContract]
    public partial class BuildingFees :  IEquatable<BuildingFees>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BuildingFees" /> class.
        /// </summary>
        /// <param name="contractorFees">The contractor fees..</param>
        /// <param name="architecturalFees">The architectural fees..</param>
        /// <param name="userFees">The user fees..</param>
        public BuildingFees(ParameterDecimal contractorFees = default(ParameterDecimal), ParameterDecimal architecturalFees = default(ParameterDecimal), ParameterDecimal userFees = default(ParameterDecimal))
        {
            this.ContractorFees = contractorFees;
            this.ArchitecturalFees = architecturalFees;
            this.UserFees = userFees;
        }
        
        /// <summary>
        /// The contractor fees.
        /// </summary>
        /// <value>The contractor fees.</value>
        [DataMember(Name="contractorFees", EmitDefaultValue=false)]
        public ParameterDecimal ContractorFees { get; set; }

        /// <summary>
        /// The architectural fees.
        /// </summary>
        /// <value>The architectural fees.</value>
        [DataMember(Name="architecturalFees", EmitDefaultValue=false)]
        public ParameterDecimal ArchitecturalFees { get; set; }

        /// <summary>
        /// The user fees.
        /// </summary>
        /// <value>The user fees.</value>
        [DataMember(Name="userFees", EmitDefaultValue=false)]
        public ParameterDecimal UserFees { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BuildingFees {\n");
            sb.Append("  ContractorFees: ").Append(ContractorFees).Append("\n");
            sb.Append("  ArchitecturalFees: ").Append(ArchitecturalFees).Append("\n");
            sb.Append("  UserFees: ").Append(UserFees).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BuildingFees);
        }

        /// <summary>
        /// Returns true if BuildingFees instances are equal
        /// </summary>
        /// <param name="input">Instance of BuildingFees to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BuildingFees input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ContractorFees == input.ContractorFees ||
                    (this.ContractorFees != null &&
                    this.ContractorFees.Equals(input.ContractorFees))
                ) && 
                (
                    this.ArchitecturalFees == input.ArchitecturalFees ||
                    (this.ArchitecturalFees != null &&
                    this.ArchitecturalFees.Equals(input.ArchitecturalFees))
                ) && 
                (
                    this.UserFees == input.UserFees ||
                    (this.UserFees != null &&
                    this.UserFees.Equals(input.UserFees))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContractorFees != null)
                    hashCode = hashCode * 59 + this.ContractorFees.GetHashCode();
                if (this.ArchitecturalFees != null)
                    hashCode = hashCode * 59 + this.ArchitecturalFees.GetHashCode();
                if (this.UserFees != null)
                    hashCode = hashCode * 59 + this.UserFees.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
