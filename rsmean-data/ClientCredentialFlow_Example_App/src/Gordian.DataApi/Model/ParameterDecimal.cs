/* 
 * RSMeans Consumer REST API V1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Gordian.DataApi.Model
{
    /// <summary>
    /// ParameterDecimal
    /// </summary>
    [DataContract]
    public partial class ParameterDecimal :  IEquatable<ParameterDecimal>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParameterDecimal" /> class.
        /// </summary>
        /// <param name="defaultValue">The default value..</param>
        /// <param name="currentValue">The current value..</param>
        public ParameterDecimal(double? defaultValue = default(double?), double? currentValue = default(double?))
        {
            this.DefaultValue = defaultValue;
            this.CurrentValue = currentValue;
        }
        
        /// <summary>
        /// The default value.
        /// </summary>
        /// <value>The default value.</value>
        [DataMember(Name="defaultValue", EmitDefaultValue=false)]
        public double? DefaultValue { get; set; }

        /// <summary>
        /// The current value.
        /// </summary>
        /// <value>The current value.</value>
        [DataMember(Name="currentValue", EmitDefaultValue=false)]
        public double? CurrentValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ParameterDecimal {\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  CurrentValue: ").Append(CurrentValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ParameterDecimal);
        }

        /// <summary>
        /// Returns true if ParameterDecimal instances are equal
        /// </summary>
        /// <param name="input">Instance of ParameterDecimal to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParameterDecimal input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DefaultValue == input.DefaultValue ||
                    (this.DefaultValue != null &&
                    this.DefaultValue.Equals(input.DefaultValue))
                ) && 
                (
                    this.CurrentValue == input.CurrentValue ||
                    (this.CurrentValue != null &&
                    this.CurrentValue.Equals(input.CurrentValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DefaultValue != null)
                    hashCode = hashCode * 59 + this.DefaultValue.GetHashCode();
                if (this.CurrentValue != null)
                    hashCode = hashCode * 59 + this.CurrentValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
