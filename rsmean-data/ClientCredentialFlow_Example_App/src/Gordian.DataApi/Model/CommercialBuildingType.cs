/* 
 * RSMeans Consumer REST API V1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Gordian.DataApi.Model
{
    /// <summary>
    /// CommercialBuildingType
    /// </summary>
    [DataContract]
    public partial class CommercialBuildingType :  IEquatable<CommercialBuildingType>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CommercialBuildingType" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="releaseYear">releaseYear.</param>
        /// <param name="code">code.</param>
        /// <param name="description">description.</param>
        /// <param name="walls">walls.</param>
        /// <param name="doesModelOfferBasement">doesModelOfferBasement.</param>
        /// <param name="areaPerimeterGuidelines">areaPerimeterGuidelines.</param>
        /// <param name="buildingParameters">buildingParameters.</param>
        /// <param name="feesPercent">feesPercent.</param>
        public CommercialBuildingType(string id = default(string), string releaseYear = default(string), string code = default(string), string description = default(string), List<Wall> walls = default(List<Wall>), bool? doesModelOfferBasement = default(bool?), List<BuildingAreaPerimeter> areaPerimeterGuidelines = default(List<BuildingAreaPerimeter>), BuildingParameters buildingParameters = default(BuildingParameters), BuildingFees feesPercent = default(BuildingFees))
        {
            this.Id = id;
            this.ReleaseYear = releaseYear;
            this.Code = code;
            this.Description = description;
            this.Walls = walls;
            this.DoesModelOfferBasement = doesModelOfferBasement;
            this.AreaPerimeterGuidelines = areaPerimeterGuidelines;
            this.BuildingParameters = buildingParameters;
            this.FeesPercent = feesPercent;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ReleaseYear
        /// </summary>
        [DataMember(Name="releaseYear", EmitDefaultValue=false)]
        public string ReleaseYear { get; set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Walls
        /// </summary>
        [DataMember(Name="walls", EmitDefaultValue=false)]
        public List<Wall> Walls { get; set; }

        /// <summary>
        /// Gets or Sets DoesModelOfferBasement
        /// </summary>
        [DataMember(Name="doesModelOfferBasement", EmitDefaultValue=false)]
        public bool? DoesModelOfferBasement { get; set; }

        /// <summary>
        /// Gets or Sets AreaPerimeterGuidelines
        /// </summary>
        [DataMember(Name="areaPerimeterGuidelines", EmitDefaultValue=false)]
        public List<BuildingAreaPerimeter> AreaPerimeterGuidelines { get; set; }

        /// <summary>
        /// Gets or Sets BuildingParameters
        /// </summary>
        [DataMember(Name="buildingParameters", EmitDefaultValue=false)]
        public BuildingParameters BuildingParameters { get; set; }

        /// <summary>
        /// Gets or Sets FeesPercent
        /// </summary>
        [DataMember(Name="feesPercent", EmitDefaultValue=false)]
        public BuildingFees FeesPercent { get; set; }

        /// <summary>
        /// Gets or Sets Href
        /// </summary>
        [DataMember(Name="href", EmitDefaultValue=false)]
        public string Href { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommercialBuildingType {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ReleaseYear: ").Append(ReleaseYear).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Walls: ").Append(Walls).Append("\n");
            sb.Append("  DoesModelOfferBasement: ").Append(DoesModelOfferBasement).Append("\n");
            sb.Append("  AreaPerimeterGuidelines: ").Append(AreaPerimeterGuidelines).Append("\n");
            sb.Append("  BuildingParameters: ").Append(BuildingParameters).Append("\n");
            sb.Append("  FeesPercent: ").Append(FeesPercent).Append("\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CommercialBuildingType);
        }

        /// <summary>
        /// Returns true if CommercialBuildingType instances are equal
        /// </summary>
        /// <param name="input">Instance of CommercialBuildingType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommercialBuildingType input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ReleaseYear == input.ReleaseYear ||
                    (this.ReleaseYear != null &&
                    this.ReleaseYear.Equals(input.ReleaseYear))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Walls == input.Walls ||
                    this.Walls != null &&
                    this.Walls.SequenceEqual(input.Walls)
                ) && 
                (
                    this.DoesModelOfferBasement == input.DoesModelOfferBasement ||
                    (this.DoesModelOfferBasement != null &&
                    this.DoesModelOfferBasement.Equals(input.DoesModelOfferBasement))
                ) && 
                (
                    this.AreaPerimeterGuidelines == input.AreaPerimeterGuidelines ||
                    this.AreaPerimeterGuidelines != null &&
                    this.AreaPerimeterGuidelines.SequenceEqual(input.AreaPerimeterGuidelines)
                ) && 
                (
                    this.BuildingParameters == input.BuildingParameters ||
                    (this.BuildingParameters != null &&
                    this.BuildingParameters.Equals(input.BuildingParameters))
                ) && 
                (
                    this.FeesPercent == input.FeesPercent ||
                    (this.FeesPercent != null &&
                    this.FeesPercent.Equals(input.FeesPercent))
                ) && 
                (
                    this.Href == input.Href ||
                    (this.Href != null &&
                    this.Href.Equals(input.Href))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ReleaseYear != null)
                    hashCode = hashCode * 59 + this.ReleaseYear.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Walls != null)
                    hashCode = hashCode * 59 + this.Walls.GetHashCode();
                if (this.DoesModelOfferBasement != null)
                    hashCode = hashCode * 59 + this.DoesModelOfferBasement.GetHashCode();
                if (this.AreaPerimeterGuidelines != null)
                    hashCode = hashCode * 59 + this.AreaPerimeterGuidelines.GetHashCode();
                if (this.BuildingParameters != null)
                    hashCode = hashCode * 59 + this.BuildingParameters.GetHashCode();
                if (this.FeesPercent != null)
                    hashCode = hashCode * 59 + this.FeesPercent.GetHashCode();
                if (this.Href != null)
                    hashCode = hashCode * 59 + this.Href.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
