/* 
 * RSMeans Consumer REST API V1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Gordian.DataApi.Model
{
    /// <summary>
    /// KeyedBucket
    /// </summary>
    [DataContract]
    public partial class KeyedBucket :  IEquatable<KeyedBucket>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KeyedBucket" /> class.
        /// </summary>
        /// <param name="docCount">docCount.</param>
        public KeyedBucket(int? docCount = default(int?))
        {
            this.DocCount = docCount;
        }
        
        /// <summary>
        /// Gets or Sets DivisionId
        /// </summary>
        [DataMember(Name="divisionId", EmitDefaultValue=false)]
        public string DivisionId { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; private set; }

        /// <summary>
        /// Gets or Sets DocCount
        /// </summary>
        [DataMember(Name="docCount", EmitDefaultValue=false)]
        public int? DocCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KeyedBucket {\n");
            sb.Append("  DivisionId: ").Append(DivisionId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DocCount: ").Append(DocCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KeyedBucket);
        }

        /// <summary>
        /// Returns true if KeyedBucket instances are equal
        /// </summary>
        /// <param name="input">Instance of KeyedBucket to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KeyedBucket input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DivisionId == input.DivisionId ||
                    (this.DivisionId != null &&
                    this.DivisionId.Equals(input.DivisionId))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DocCount == input.DocCount ||
                    (this.DocCount != null &&
                    this.DocCount.Equals(input.DocCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DivisionId != null)
                    hashCode = hashCode * 59 + this.DivisionId.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DocCount != null)
                    hashCode = hashCode * 59 + this.DocCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
