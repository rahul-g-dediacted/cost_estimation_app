/* 
 * RSMeans Consumer REST API V1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Gordian.DataApi.Model
{
    /// <summary>
    /// BuildingAssemblyLine
    /// </summary>
    [DataContract]
    public partial class BuildingAssemblyLine :  IEquatable<BuildingAssemblyLine>, IValidatableObject
    {
        /// <summary>
        /// Defines Source
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SourceEnum
        {
            
            /// <summary>
            /// Enum Model for value: model
            /// </summary>
            [EnumMember(Value = "model")]
            Model = 1,
            
            /// <summary>
            /// Enum Additive for value: additive
            /// </summary>
            [EnumMember(Value = "additive")]
            Additive = 2,
            
            /// <summary>
            /// Enum Custom for value: custom
            /// </summary>
            [EnumMember(Value = "custom")]
            Custom = 3
        }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public SourceEnum? Source { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BuildingAssemblyLine" /> class.
        /// </summary>
        /// <param name="lineNumber">lineNumber.</param>
        /// <param name="description">description.</param>
        /// <param name="unitOfMeasure">unitOfMeasure.</param>
        /// <param name="costPerUnit">costPerUnit.</param>
        /// <param name="quantity">quantity.</param>
        /// <param name="cost">cost.</param>
        /// <param name="costPerSquareFoot">costPerSquareFoot.</param>
        /// <param name="source">source.</param>
        /// <param name="isQuantityCustomized">isQuantityCustomized.</param>
        public BuildingAssemblyLine(string lineNumber = default(string), string description = default(string), string unitOfMeasure = default(string), double? costPerUnit = default(double?), double? quantity = default(double?), double? cost = default(double?), double? costPerSquareFoot = default(double?), SourceEnum? source = default(SourceEnum?), bool? isQuantityCustomized = default(bool?))
        {
            this.LineNumber = lineNumber;
            this.Description = description;
            this.UnitOfMeasure = unitOfMeasure;
            this.CostPerUnit = costPerUnit;
            this.Quantity = quantity;
            this.Cost = cost;
            this.CostPerSquareFoot = costPerSquareFoot;
            this.Source = source;
            this.IsQuantityCustomized = isQuantityCustomized;
        }
        
        /// <summary>
        /// Gets or Sets LineNumber
        /// </summary>
        [DataMember(Name="lineNumber", EmitDefaultValue=false)]
        public string LineNumber { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets UnitOfMeasure
        /// </summary>
        [DataMember(Name="unitOfMeasure", EmitDefaultValue=false)]
        public string UnitOfMeasure { get; set; }

        /// <summary>
        /// Gets or Sets CostPerUnit
        /// </summary>
        [DataMember(Name="costPerUnit", EmitDefaultValue=false)]
        public double? CostPerUnit { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public double? Quantity { get; set; }

        /// <summary>
        /// Gets or Sets Cost
        /// </summary>
        [DataMember(Name="cost", EmitDefaultValue=false)]
        public double? Cost { get; set; }

        /// <summary>
        /// Gets or Sets CostPerSquareFoot
        /// </summary>
        [DataMember(Name="costPerSquareFoot", EmitDefaultValue=false)]
        public double? CostPerSquareFoot { get; set; }


        /// <summary>
        /// Gets or Sets IsQuantityCustomized
        /// </summary>
        [DataMember(Name="isQuantityCustomized", EmitDefaultValue=false)]
        public bool? IsQuantityCustomized { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BuildingAssemblyLine {\n");
            sb.Append("  LineNumber: ").Append(LineNumber).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  UnitOfMeasure: ").Append(UnitOfMeasure).Append("\n");
            sb.Append("  CostPerUnit: ").Append(CostPerUnit).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  CostPerSquareFoot: ").Append(CostPerSquareFoot).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  IsQuantityCustomized: ").Append(IsQuantityCustomized).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BuildingAssemblyLine);
        }

        /// <summary>
        /// Returns true if BuildingAssemblyLine instances are equal
        /// </summary>
        /// <param name="input">Instance of BuildingAssemblyLine to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BuildingAssemblyLine input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LineNumber == input.LineNumber ||
                    (this.LineNumber != null &&
                    this.LineNumber.Equals(input.LineNumber))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.UnitOfMeasure == input.UnitOfMeasure ||
                    (this.UnitOfMeasure != null &&
                    this.UnitOfMeasure.Equals(input.UnitOfMeasure))
                ) && 
                (
                    this.CostPerUnit == input.CostPerUnit ||
                    (this.CostPerUnit != null &&
                    this.CostPerUnit.Equals(input.CostPerUnit))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.Cost == input.Cost ||
                    (this.Cost != null &&
                    this.Cost.Equals(input.Cost))
                ) && 
                (
                    this.CostPerSquareFoot == input.CostPerSquareFoot ||
                    (this.CostPerSquareFoot != null &&
                    this.CostPerSquareFoot.Equals(input.CostPerSquareFoot))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.IsQuantityCustomized == input.IsQuantityCustomized ||
                    (this.IsQuantityCustomized != null &&
                    this.IsQuantityCustomized.Equals(input.IsQuantityCustomized))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LineNumber != null)
                    hashCode = hashCode * 59 + this.LineNumber.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.UnitOfMeasure != null)
                    hashCode = hashCode * 59 + this.UnitOfMeasure.GetHashCode();
                if (this.CostPerUnit != null)
                    hashCode = hashCode * 59 + this.CostPerUnit.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.Cost != null)
                    hashCode = hashCode * 59 + this.Cost.GetHashCode();
                if (this.CostPerSquareFoot != null)
                    hashCode = hashCode * 59 + this.CostPerSquareFoot.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                if (this.IsQuantityCustomized != null)
                    hashCode = hashCode * 59 + this.IsQuantityCustomized.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
