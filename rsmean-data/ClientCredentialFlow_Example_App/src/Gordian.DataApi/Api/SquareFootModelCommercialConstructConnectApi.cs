/* 
 * RSMeans Consumer REST API V1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using Gordian.DataApi.Client;
using Gordian.DataApi.Model;
using RestSharp;

namespace Gordian.DataApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISquareFootModelCommercialConstructConnectApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets a square foot model estimate and labor hours, summarized at the Level 3 and Total Model, based on model and wall/framing type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The model Id, for example 2017-001.</param>
        /// <param name="totalDollarAmount">The total dollar amount of the building. (optional)</param>
        /// <param name="area">The area of the building (S.F.). (optional)</param>
        /// <param name="renovationLevel">The 2-digit renovation level code. Eg. 01 (optional)</param>
        /// <param name="locationId">The location identifier for computing localized costs. Defaults to US National Average (us-us-national). (optional)</param>
        /// <param name="laborType">Specifies standard union or open shop unit lines. Defaults to standard union (std). (optional)</param>
        /// <param name="includeBasement">Specifies if basement is includeded. Default to false. (optional)</param>
        /// <returns>CommercialBuildingWithExtendedCost</returns>
        CommercialBuildingWithExtendedCost SquarefootmodelCommercialConstructConnectCostByModelIdGet (string modelId, double? totalDollarAmount = null, double? area = null, string renovationLevel = null, string locationId = null, string laborType = null, bool? includeBasement = null);

        /// <summary>
        /// Gets a square foot model estimate and labor hours, summarized at the Level 3 and Total Model, based on model and wall/framing type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The model Id, for example 2017-001.</param>
        /// <param name="totalDollarAmount">The total dollar amount of the building. (optional)</param>
        /// <param name="area">The area of the building (S.F.). (optional)</param>
        /// <param name="renovationLevel">The 2-digit renovation level code. Eg. 01 (optional)</param>
        /// <param name="locationId">The location identifier for computing localized costs. Defaults to US National Average (us-us-national). (optional)</param>
        /// <param name="laborType">Specifies standard union or open shop unit lines. Defaults to standard union (std). (optional)</param>
        /// <param name="includeBasement">Specifies if basement is includeded. Default to false. (optional)</param>
        /// <returns>ApiResponse of CommercialBuildingWithExtendedCost</returns>
        ApiResponse<CommercialBuildingWithExtendedCost> SquarefootmodelCommercialConstructConnectCostByModelIdGetWithHttpInfo (string modelId, double? totalDollarAmount = null, double? area = null, string renovationLevel = null, string locationId = null, string laborType = null, bool? includeBasement = null);
        /// <summary>
        /// Get ConstructConnect Models by year
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseYear"> (optional)</param>
        /// <param name="searchTerm"> (optional)</param>
        /// <returns>NonpagedListCommercialBuildingTypeWithRenovations</returns>
        NonpagedListCommercialBuildingTypeWithRenovations SquarefootmodelCommercialConstructConnectGet (string releaseYear = null, string searchTerm = null);

        /// <summary>
        /// Get ConstructConnect Models by year
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseYear"> (optional)</param>
        /// <param name="searchTerm"> (optional)</param>
        /// <returns>ApiResponse of NonpagedListCommercialBuildingTypeWithRenovations</returns>
        ApiResponse<NonpagedListCommercialBuildingTypeWithRenovations> SquarefootmodelCommercialConstructConnectGetWithHttpInfo (string releaseYear = null, string searchTerm = null);
        /// <summary>
        /// Gets a square foot model estimate and labor hours with schedule of construction, summarized at the Level 3 and Total Model, based on model and wall/framing type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The model Id, for example 2017-001.</param>
        /// <param name="totalDollarAmount">The total dollar amount of the building. (optional)</param>
        /// <param name="area">The area of the building (S.F.). (optional)</param>
        /// <param name="renovationLevel">The 2-digit renovation level code. Eg. 01 (optional)</param>
        /// <param name="constructionStartDate">Specifies the construction start date. (optional)</param>
        /// <param name="locationId">The location identifier for computing localized costs. Defaults to US National Average (us-us-national). (optional)</param>
        /// <param name="laborType">Specifies standard union or open shop unit lines. Defaults to standard union (std). (optional)</param>
        /// <param name="includeBasement">Specifies if basement is includeded. Default to false. (optional)</param>
        /// <returns>CommercialBuildingWithToc</returns>
        CommercialBuildingWithToc SquarefootmodelCommercialConstructConnectTocByModelIdGet (string modelId, double? totalDollarAmount = null, double? area = null, string renovationLevel = null, DateTime? constructionStartDate = null, string locationId = null, string laborType = null, bool? includeBasement = null);

        /// <summary>
        /// Gets a square foot model estimate and labor hours with schedule of construction, summarized at the Level 3 and Total Model, based on model and wall/framing type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The model Id, for example 2017-001.</param>
        /// <param name="totalDollarAmount">The total dollar amount of the building. (optional)</param>
        /// <param name="area">The area of the building (S.F.). (optional)</param>
        /// <param name="renovationLevel">The 2-digit renovation level code. Eg. 01 (optional)</param>
        /// <param name="constructionStartDate">Specifies the construction start date. (optional)</param>
        /// <param name="locationId">The location identifier for computing localized costs. Defaults to US National Average (us-us-national). (optional)</param>
        /// <param name="laborType">Specifies standard union or open shop unit lines. Defaults to standard union (std). (optional)</param>
        /// <param name="includeBasement">Specifies if basement is includeded. Default to false. (optional)</param>
        /// <returns>ApiResponse of CommercialBuildingWithToc</returns>
        ApiResponse<CommercialBuildingWithToc> SquarefootmodelCommercialConstructConnectTocByModelIdGetWithHttpInfo (string modelId, double? totalDollarAmount = null, double? area = null, string renovationLevel = null, DateTime? constructionStartDate = null, string locationId = null, string laborType = null, bool? includeBasement = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets a square foot model estimate and labor hours, summarized at the Level 3 and Total Model, based on model and wall/framing type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The model Id, for example 2017-001.</param>
        /// <param name="totalDollarAmount">The total dollar amount of the building. (optional)</param>
        /// <param name="area">The area of the building (S.F.). (optional)</param>
        /// <param name="renovationLevel">The 2-digit renovation level code. Eg. 01 (optional)</param>
        /// <param name="locationId">The location identifier for computing localized costs. Defaults to US National Average (us-us-national). (optional)</param>
        /// <param name="laborType">Specifies standard union or open shop unit lines. Defaults to standard union (std). (optional)</param>
        /// <param name="includeBasement">Specifies if basement is includeded. Default to false. (optional)</param>
        /// <returns>Task of CommercialBuildingWithExtendedCost</returns>
        System.Threading.Tasks.Task<CommercialBuildingWithExtendedCost> SquarefootmodelCommercialConstructConnectCostByModelIdGetAsync (string modelId, double? totalDollarAmount = null, double? area = null, string renovationLevel = null, string locationId = null, string laborType = null, bool? includeBasement = null);

        /// <summary>
        /// Gets a square foot model estimate and labor hours, summarized at the Level 3 and Total Model, based on model and wall/framing type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The model Id, for example 2017-001.</param>
        /// <param name="totalDollarAmount">The total dollar amount of the building. (optional)</param>
        /// <param name="area">The area of the building (S.F.). (optional)</param>
        /// <param name="renovationLevel">The 2-digit renovation level code. Eg. 01 (optional)</param>
        /// <param name="locationId">The location identifier for computing localized costs. Defaults to US National Average (us-us-national). (optional)</param>
        /// <param name="laborType">Specifies standard union or open shop unit lines. Defaults to standard union (std). (optional)</param>
        /// <param name="includeBasement">Specifies if basement is includeded. Default to false. (optional)</param>
        /// <returns>Task of ApiResponse (CommercialBuildingWithExtendedCost)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommercialBuildingWithExtendedCost>> SquarefootmodelCommercialConstructConnectCostByModelIdGetAsyncWithHttpInfo (string modelId, double? totalDollarAmount = null, double? area = null, string renovationLevel = null, string locationId = null, string laborType = null, bool? includeBasement = null);
        /// <summary>
        /// Get ConstructConnect Models by year
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseYear"> (optional)</param>
        /// <param name="searchTerm"> (optional)</param>
        /// <returns>Task of NonpagedListCommercialBuildingTypeWithRenovations</returns>
        System.Threading.Tasks.Task<NonpagedListCommercialBuildingTypeWithRenovations> SquarefootmodelCommercialConstructConnectGetAsync (string releaseYear = null, string searchTerm = null);

        /// <summary>
        /// Get ConstructConnect Models by year
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseYear"> (optional)</param>
        /// <param name="searchTerm"> (optional)</param>
        /// <returns>Task of ApiResponse (NonpagedListCommercialBuildingTypeWithRenovations)</returns>
        System.Threading.Tasks.Task<ApiResponse<NonpagedListCommercialBuildingTypeWithRenovations>> SquarefootmodelCommercialConstructConnectGetAsyncWithHttpInfo (string releaseYear = null, string searchTerm = null);
        /// <summary>
        /// Gets a square foot model estimate and labor hours with schedule of construction, summarized at the Level 3 and Total Model, based on model and wall/framing type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The model Id, for example 2017-001.</param>
        /// <param name="totalDollarAmount">The total dollar amount of the building. (optional)</param>
        /// <param name="area">The area of the building (S.F.). (optional)</param>
        /// <param name="renovationLevel">The 2-digit renovation level code. Eg. 01 (optional)</param>
        /// <param name="constructionStartDate">Specifies the construction start date. (optional)</param>
        /// <param name="locationId">The location identifier for computing localized costs. Defaults to US National Average (us-us-national). (optional)</param>
        /// <param name="laborType">Specifies standard union or open shop unit lines. Defaults to standard union (std). (optional)</param>
        /// <param name="includeBasement">Specifies if basement is includeded. Default to false. (optional)</param>
        /// <returns>Task of CommercialBuildingWithToc</returns>
        System.Threading.Tasks.Task<CommercialBuildingWithToc> SquarefootmodelCommercialConstructConnectTocByModelIdGetAsync (string modelId, double? totalDollarAmount = null, double? area = null, string renovationLevel = null, DateTime? constructionStartDate = null, string locationId = null, string laborType = null, bool? includeBasement = null);

        /// <summary>
        /// Gets a square foot model estimate and labor hours with schedule of construction, summarized at the Level 3 and Total Model, based on model and wall/framing type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The model Id, for example 2017-001.</param>
        /// <param name="totalDollarAmount">The total dollar amount of the building. (optional)</param>
        /// <param name="area">The area of the building (S.F.). (optional)</param>
        /// <param name="renovationLevel">The 2-digit renovation level code. Eg. 01 (optional)</param>
        /// <param name="constructionStartDate">Specifies the construction start date. (optional)</param>
        /// <param name="locationId">The location identifier for computing localized costs. Defaults to US National Average (us-us-national). (optional)</param>
        /// <param name="laborType">Specifies standard union or open shop unit lines. Defaults to standard union (std). (optional)</param>
        /// <param name="includeBasement">Specifies if basement is includeded. Default to false. (optional)</param>
        /// <returns>Task of ApiResponse (CommercialBuildingWithToc)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommercialBuildingWithToc>> SquarefootmodelCommercialConstructConnectTocByModelIdGetAsyncWithHttpInfo (string modelId, double? totalDollarAmount = null, double? area = null, string renovationLevel = null, DateTime? constructionStartDate = null, string locationId = null, string laborType = null, bool? includeBasement = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SquareFootModelCommercialConstructConnectApi : ISquareFootModelCommercialConstructConnectApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SquareFootModelCommercialConstructConnectApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SquareFootModelCommercialConstructConnectApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SquareFootModelCommercialConstructConnectApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SquareFootModelCommercialConstructConnectApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets a square foot model estimate and labor hours, summarized at the Level 3 and Total Model, based on model and wall/framing type. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The model Id, for example 2017-001.</param>
        /// <param name="totalDollarAmount">The total dollar amount of the building. (optional)</param>
        /// <param name="area">The area of the building (S.F.). (optional)</param>
        /// <param name="renovationLevel">The 2-digit renovation level code. Eg. 01 (optional)</param>
        /// <param name="locationId">The location identifier for computing localized costs. Defaults to US National Average (us-us-national). (optional)</param>
        /// <param name="laborType">Specifies standard union or open shop unit lines. Defaults to standard union (std). (optional)</param>
        /// <param name="includeBasement">Specifies if basement is includeded. Default to false. (optional)</param>
        /// <returns>CommercialBuildingWithExtendedCost</returns>
        public CommercialBuildingWithExtendedCost SquarefootmodelCommercialConstructConnectCostByModelIdGet (string modelId, double? totalDollarAmount = null, double? area = null, string renovationLevel = null, string locationId = null, string laborType = null, bool? includeBasement = null)
        {
             ApiResponse<CommercialBuildingWithExtendedCost> localVarResponse = SquarefootmodelCommercialConstructConnectCostByModelIdGetWithHttpInfo(modelId, totalDollarAmount, area, renovationLevel, locationId, laborType, includeBasement);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a square foot model estimate and labor hours, summarized at the Level 3 and Total Model, based on model and wall/framing type. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The model Id, for example 2017-001.</param>
        /// <param name="totalDollarAmount">The total dollar amount of the building. (optional)</param>
        /// <param name="area">The area of the building (S.F.). (optional)</param>
        /// <param name="renovationLevel">The 2-digit renovation level code. Eg. 01 (optional)</param>
        /// <param name="locationId">The location identifier for computing localized costs. Defaults to US National Average (us-us-national). (optional)</param>
        /// <param name="laborType">Specifies standard union or open shop unit lines. Defaults to standard union (std). (optional)</param>
        /// <param name="includeBasement">Specifies if basement is includeded. Default to false. (optional)</param>
        /// <returns>ApiResponse of CommercialBuildingWithExtendedCost</returns>
        public ApiResponse< CommercialBuildingWithExtendedCost > SquarefootmodelCommercialConstructConnectCostByModelIdGetWithHttpInfo (string modelId, double? totalDollarAmount = null, double? area = null, string renovationLevel = null, string locationId = null, string laborType = null, bool? includeBasement = null)
        {
            // verify the required parameter 'modelId' is set
            if (modelId == null)
                throw new ApiException(400, "Missing required parameter 'modelId' when calling SquareFootModelCommercialConstructConnectApi->SquarefootmodelCommercialConstructConnectCostByModelIdGet");

            var localVarPath = "/v1/squarefootmodel/commercial/constructconnect/cost/{modelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelId != null) localVarPathParams.Add("modelId", this.Configuration.ApiClient.ParameterToString(modelId)); // path parameter
            if (totalDollarAmount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "totalDollarAmount", totalDollarAmount)); // query parameter
            if (area != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "area", area)); // query parameter
            if (renovationLevel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "renovationLevel", renovationLevel)); // query parameter
            if (locationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locationId", locationId)); // query parameter
            if (laborType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "laborType", laborType)); // query parameter
            if (includeBasement != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeBasement", includeBasement)); // query parameter

            // authentication (rsmids_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SquarefootmodelCommercialConstructConnectCostByModelIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommercialBuildingWithExtendedCost>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommercialBuildingWithExtendedCost) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommercialBuildingWithExtendedCost)));
        }

        /// <summary>
        /// Gets a square foot model estimate and labor hours, summarized at the Level 3 and Total Model, based on model and wall/framing type. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The model Id, for example 2017-001.</param>
        /// <param name="totalDollarAmount">The total dollar amount of the building. (optional)</param>
        /// <param name="area">The area of the building (S.F.). (optional)</param>
        /// <param name="renovationLevel">The 2-digit renovation level code. Eg. 01 (optional)</param>
        /// <param name="locationId">The location identifier for computing localized costs. Defaults to US National Average (us-us-national). (optional)</param>
        /// <param name="laborType">Specifies standard union or open shop unit lines. Defaults to standard union (std). (optional)</param>
        /// <param name="includeBasement">Specifies if basement is includeded. Default to false. (optional)</param>
        /// <returns>Task of CommercialBuildingWithExtendedCost</returns>
        public async System.Threading.Tasks.Task<CommercialBuildingWithExtendedCost> SquarefootmodelCommercialConstructConnectCostByModelIdGetAsync (string modelId, double? totalDollarAmount = null, double? area = null, string renovationLevel = null, string locationId = null, string laborType = null, bool? includeBasement = null)
        {
             ApiResponse<CommercialBuildingWithExtendedCost> localVarResponse = await SquarefootmodelCommercialConstructConnectCostByModelIdGetAsyncWithHttpInfo(modelId, totalDollarAmount, area, renovationLevel, locationId, laborType, includeBasement);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a square foot model estimate and labor hours, summarized at the Level 3 and Total Model, based on model and wall/framing type. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The model Id, for example 2017-001.</param>
        /// <param name="totalDollarAmount">The total dollar amount of the building. (optional)</param>
        /// <param name="area">The area of the building (S.F.). (optional)</param>
        /// <param name="renovationLevel">The 2-digit renovation level code. Eg. 01 (optional)</param>
        /// <param name="locationId">The location identifier for computing localized costs. Defaults to US National Average (us-us-national). (optional)</param>
        /// <param name="laborType">Specifies standard union or open shop unit lines. Defaults to standard union (std). (optional)</param>
        /// <param name="includeBasement">Specifies if basement is includeded. Default to false. (optional)</param>
        /// <returns>Task of ApiResponse (CommercialBuildingWithExtendedCost)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CommercialBuildingWithExtendedCost>> SquarefootmodelCommercialConstructConnectCostByModelIdGetAsyncWithHttpInfo (string modelId, double? totalDollarAmount = null, double? area = null, string renovationLevel = null, string locationId = null, string laborType = null, bool? includeBasement = null)
        {
            // verify the required parameter 'modelId' is set
            if (modelId == null)
                throw new ApiException(400, "Missing required parameter 'modelId' when calling SquareFootModelCommercialConstructConnectApi->SquarefootmodelCommercialConstructConnectCostByModelIdGet");

            var localVarPath = "/v1/squarefootmodel/commercial/constructconnect/cost/{modelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelId != null) localVarPathParams.Add("modelId", this.Configuration.ApiClient.ParameterToString(modelId)); // path parameter
            if (totalDollarAmount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "totalDollarAmount", totalDollarAmount)); // query parameter
            if (area != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "area", area)); // query parameter
            if (renovationLevel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "renovationLevel", renovationLevel)); // query parameter
            if (locationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locationId", locationId)); // query parameter
            if (laborType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "laborType", laborType)); // query parameter
            if (includeBasement != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeBasement", includeBasement)); // query parameter

            // authentication (rsmids_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SquarefootmodelCommercialConstructConnectCostByModelIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommercialBuildingWithExtendedCost>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommercialBuildingWithExtendedCost) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommercialBuildingWithExtendedCost)));
        }

        /// <summary>
        /// Get ConstructConnect Models by year 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseYear"> (optional)</param>
        /// <param name="searchTerm"> (optional)</param>
        /// <returns>NonpagedListCommercialBuildingTypeWithRenovations</returns>
        public NonpagedListCommercialBuildingTypeWithRenovations SquarefootmodelCommercialConstructConnectGet (string releaseYear = null, string searchTerm = null)
        {
             ApiResponse<NonpagedListCommercialBuildingTypeWithRenovations> localVarResponse = SquarefootmodelCommercialConstructConnectGetWithHttpInfo(releaseYear, searchTerm);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get ConstructConnect Models by year 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseYear"> (optional)</param>
        /// <param name="searchTerm"> (optional)</param>
        /// <returns>ApiResponse of NonpagedListCommercialBuildingTypeWithRenovations</returns>
        public ApiResponse< NonpagedListCommercialBuildingTypeWithRenovations > SquarefootmodelCommercialConstructConnectGetWithHttpInfo (string releaseYear = null, string searchTerm = null)
        {

            var localVarPath = "/v1/squarefootmodel/commercial/constructconnect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseYear != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "releaseYear", releaseYear)); // query parameter
            if (searchTerm != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchTerm", searchTerm)); // query parameter

            // authentication (rsmids_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SquarefootmodelCommercialConstructConnectGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NonpagedListCommercialBuildingTypeWithRenovations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NonpagedListCommercialBuildingTypeWithRenovations) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NonpagedListCommercialBuildingTypeWithRenovations)));
        }

        /// <summary>
        /// Get ConstructConnect Models by year 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseYear"> (optional)</param>
        /// <param name="searchTerm"> (optional)</param>
        /// <returns>Task of NonpagedListCommercialBuildingTypeWithRenovations</returns>
        public async System.Threading.Tasks.Task<NonpagedListCommercialBuildingTypeWithRenovations> SquarefootmodelCommercialConstructConnectGetAsync (string releaseYear = null, string searchTerm = null)
        {
             ApiResponse<NonpagedListCommercialBuildingTypeWithRenovations> localVarResponse = await SquarefootmodelCommercialConstructConnectGetAsyncWithHttpInfo(releaseYear, searchTerm);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get ConstructConnect Models by year 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseYear"> (optional)</param>
        /// <param name="searchTerm"> (optional)</param>
        /// <returns>Task of ApiResponse (NonpagedListCommercialBuildingTypeWithRenovations)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NonpagedListCommercialBuildingTypeWithRenovations>> SquarefootmodelCommercialConstructConnectGetAsyncWithHttpInfo (string releaseYear = null, string searchTerm = null)
        {

            var localVarPath = "/v1/squarefootmodel/commercial/constructconnect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseYear != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "releaseYear", releaseYear)); // query parameter
            if (searchTerm != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchTerm", searchTerm)); // query parameter

            // authentication (rsmids_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SquarefootmodelCommercialConstructConnectGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NonpagedListCommercialBuildingTypeWithRenovations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NonpagedListCommercialBuildingTypeWithRenovations) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NonpagedListCommercialBuildingTypeWithRenovations)));
        }

        /// <summary>
        /// Gets a square foot model estimate and labor hours with schedule of construction, summarized at the Level 3 and Total Model, based on model and wall/framing type. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The model Id, for example 2017-001.</param>
        /// <param name="totalDollarAmount">The total dollar amount of the building. (optional)</param>
        /// <param name="area">The area of the building (S.F.). (optional)</param>
        /// <param name="renovationLevel">The 2-digit renovation level code. Eg. 01 (optional)</param>
        /// <param name="constructionStartDate">Specifies the construction start date. (optional)</param>
        /// <param name="locationId">The location identifier for computing localized costs. Defaults to US National Average (us-us-national). (optional)</param>
        /// <param name="laborType">Specifies standard union or open shop unit lines. Defaults to standard union (std). (optional)</param>
        /// <param name="includeBasement">Specifies if basement is includeded. Default to false. (optional)</param>
        /// <returns>CommercialBuildingWithToc</returns>
        public CommercialBuildingWithToc SquarefootmodelCommercialConstructConnectTocByModelIdGet (string modelId, double? totalDollarAmount = null, double? area = null, string renovationLevel = null, DateTime? constructionStartDate = null, string locationId = null, string laborType = null, bool? includeBasement = null)
        {
             ApiResponse<CommercialBuildingWithToc> localVarResponse = SquarefootmodelCommercialConstructConnectTocByModelIdGetWithHttpInfo(modelId, totalDollarAmount, area, renovationLevel, constructionStartDate, locationId, laborType, includeBasement);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a square foot model estimate and labor hours with schedule of construction, summarized at the Level 3 and Total Model, based on model and wall/framing type. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The model Id, for example 2017-001.</param>
        /// <param name="totalDollarAmount">The total dollar amount of the building. (optional)</param>
        /// <param name="area">The area of the building (S.F.). (optional)</param>
        /// <param name="renovationLevel">The 2-digit renovation level code. Eg. 01 (optional)</param>
        /// <param name="constructionStartDate">Specifies the construction start date. (optional)</param>
        /// <param name="locationId">The location identifier for computing localized costs. Defaults to US National Average (us-us-national). (optional)</param>
        /// <param name="laborType">Specifies standard union or open shop unit lines. Defaults to standard union (std). (optional)</param>
        /// <param name="includeBasement">Specifies if basement is includeded. Default to false. (optional)</param>
        /// <returns>ApiResponse of CommercialBuildingWithToc</returns>
        public ApiResponse< CommercialBuildingWithToc > SquarefootmodelCommercialConstructConnectTocByModelIdGetWithHttpInfo (string modelId, double? totalDollarAmount = null, double? area = null, string renovationLevel = null, DateTime? constructionStartDate = null, string locationId = null, string laborType = null, bool? includeBasement = null)
        {
            // verify the required parameter 'modelId' is set
            if (modelId == null)
                throw new ApiException(400, "Missing required parameter 'modelId' when calling SquareFootModelCommercialConstructConnectApi->SquarefootmodelCommercialConstructConnectTocByModelIdGet");

            var localVarPath = "/v1/squarefootmodel/commercial/constructconnect/toc/{modelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelId != null) localVarPathParams.Add("modelId", this.Configuration.ApiClient.ParameterToString(modelId)); // path parameter
            if (totalDollarAmount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "totalDollarAmount", totalDollarAmount)); // query parameter
            if (area != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "area", area)); // query parameter
            if (renovationLevel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "renovationLevel", renovationLevel)); // query parameter
            if (constructionStartDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "constructionStartDate", constructionStartDate)); // query parameter
            if (locationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locationId", locationId)); // query parameter
            if (laborType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "laborType", laborType)); // query parameter
            if (includeBasement != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeBasement", includeBasement)); // query parameter

            // authentication (rsmids_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SquarefootmodelCommercialConstructConnectTocByModelIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommercialBuildingWithToc>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommercialBuildingWithToc) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommercialBuildingWithToc)));
        }

        /// <summary>
        /// Gets a square foot model estimate and labor hours with schedule of construction, summarized at the Level 3 and Total Model, based on model and wall/framing type. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The model Id, for example 2017-001.</param>
        /// <param name="totalDollarAmount">The total dollar amount of the building. (optional)</param>
        /// <param name="area">The area of the building (S.F.). (optional)</param>
        /// <param name="renovationLevel">The 2-digit renovation level code. Eg. 01 (optional)</param>
        /// <param name="constructionStartDate">Specifies the construction start date. (optional)</param>
        /// <param name="locationId">The location identifier for computing localized costs. Defaults to US National Average (us-us-national). (optional)</param>
        /// <param name="laborType">Specifies standard union or open shop unit lines. Defaults to standard union (std). (optional)</param>
        /// <param name="includeBasement">Specifies if basement is includeded. Default to false. (optional)</param>
        /// <returns>Task of CommercialBuildingWithToc</returns>
        public async System.Threading.Tasks.Task<CommercialBuildingWithToc> SquarefootmodelCommercialConstructConnectTocByModelIdGetAsync (string modelId, double? totalDollarAmount = null, double? area = null, string renovationLevel = null, DateTime? constructionStartDate = null, string locationId = null, string laborType = null, bool? includeBasement = null)
        {
             ApiResponse<CommercialBuildingWithToc> localVarResponse = await SquarefootmodelCommercialConstructConnectTocByModelIdGetAsyncWithHttpInfo(modelId, totalDollarAmount, area, renovationLevel, constructionStartDate, locationId, laborType, includeBasement);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a square foot model estimate and labor hours with schedule of construction, summarized at the Level 3 and Total Model, based on model and wall/framing type. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The model Id, for example 2017-001.</param>
        /// <param name="totalDollarAmount">The total dollar amount of the building. (optional)</param>
        /// <param name="area">The area of the building (S.F.). (optional)</param>
        /// <param name="renovationLevel">The 2-digit renovation level code. Eg. 01 (optional)</param>
        /// <param name="constructionStartDate">Specifies the construction start date. (optional)</param>
        /// <param name="locationId">The location identifier for computing localized costs. Defaults to US National Average (us-us-national). (optional)</param>
        /// <param name="laborType">Specifies standard union or open shop unit lines. Defaults to standard union (std). (optional)</param>
        /// <param name="includeBasement">Specifies if basement is includeded. Default to false. (optional)</param>
        /// <returns>Task of ApiResponse (CommercialBuildingWithToc)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CommercialBuildingWithToc>> SquarefootmodelCommercialConstructConnectTocByModelIdGetAsyncWithHttpInfo (string modelId, double? totalDollarAmount = null, double? area = null, string renovationLevel = null, DateTime? constructionStartDate = null, string locationId = null, string laborType = null, bool? includeBasement = null)
        {
            // verify the required parameter 'modelId' is set
            if (modelId == null)
                throw new ApiException(400, "Missing required parameter 'modelId' when calling SquareFootModelCommercialConstructConnectApi->SquarefootmodelCommercialConstructConnectTocByModelIdGet");

            var localVarPath = "/v1/squarefootmodel/commercial/constructconnect/toc/{modelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelId != null) localVarPathParams.Add("modelId", this.Configuration.ApiClient.ParameterToString(modelId)); // path parameter
            if (totalDollarAmount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "totalDollarAmount", totalDollarAmount)); // query parameter
            if (area != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "area", area)); // query parameter
            if (renovationLevel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "renovationLevel", renovationLevel)); // query parameter
            if (constructionStartDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "constructionStartDate", constructionStartDate)); // query parameter
            if (locationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locationId", locationId)); // query parameter
            if (laborType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "laborType", laborType)); // query parameter
            if (includeBasement != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeBasement", includeBasement)); // query parameter

            // authentication (rsmids_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SquarefootmodelCommercialConstructConnectTocByModelIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommercialBuildingWithToc>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommercialBuildingWithToc) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommercialBuildingWithToc)));
        }

    }
}
