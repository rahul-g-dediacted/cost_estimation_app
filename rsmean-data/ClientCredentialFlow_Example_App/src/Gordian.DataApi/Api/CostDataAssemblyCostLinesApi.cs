/* 
 * RSMeans Consumer REST API V1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using Gordian.DataApi.Client;
using Gordian.DataApi.Model;
using RestSharp;

namespace Gordian.DataApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICostDataAssemblyCostLinesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets a single localized assembly cost line.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="id">The assembly line identifier.</param>
        /// <param name="expand">A list of properties to expand. Applies only to expandable properties. (optional)</param>
        /// <returns>AssemblyCostLine</returns>
        AssemblyCostLine CostdataAssemblyCatalogsByCatIdCostLinesByIdGet (string catId, string id, List<string> expand = null);

        /// <summary>
        /// Gets a single localized assembly cost line.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="id">The assembly line identifier.</param>
        /// <param name="expand">A list of properties to expand. Applies only to expandable properties. (optional)</param>
        /// <returns>ApiResponse of AssemblyCostLine</returns>
        ApiResponse<AssemblyCostLine> CostdataAssemblyCatalogsByCatIdCostLinesByIdGetWithHttpInfo (string catId, string id, List<string> expand = null);
        /// <summary>
        /// Gets a single assembly unit cost line detail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="lineId">The assembly line identifier.</param>
        /// <param name="id">The unit line identifier.</param>
        /// <param name="expand">A list of properties to expand. Applies only to expandable properties. (optional)</param>
        /// <returns>AssemblyUnitLineComponent</returns>
        AssemblyUnitLineComponent CostdataAssemblyCatalogsByCatIdCostLinesByLineIdComponentsByIdGet (string catId, string lineId, string id, List<string> expand = null);

        /// <summary>
        /// Gets a single assembly unit cost line detail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="lineId">The assembly line identifier.</param>
        /// <param name="id">The unit line identifier.</param>
        /// <param name="expand">A list of properties to expand. Applies only to expandable properties. (optional)</param>
        /// <returns>ApiResponse of AssemblyUnitLineComponent</returns>
        ApiResponse<AssemblyUnitLineComponent> CostdataAssemblyCatalogsByCatIdCostLinesByLineIdComponentsByIdGetWithHttpInfo (string catId, string lineId, string id, List<string> expand = null);
        /// <summary>
        /// Gets list of assembly unit cost lines detail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="lineId">The assembly line identifier.</param>
        /// <param name="expand">A list of properties to expand. Applies only to expandable properties. (optional)</param>
        /// <returns>NonpagedListAssemblyUnitLineComponent</returns>
        NonpagedListAssemblyUnitLineComponent CostdataAssemblyCatalogsByCatIdCostLinesByLineIdComponentsGet (string catId, string lineId, List<string> expand = null);

        /// <summary>
        /// Gets list of assembly unit cost lines detail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="lineId">The assembly line identifier.</param>
        /// <param name="expand">A list of properties to expand. Applies only to expandable properties. (optional)</param>
        /// <returns>ApiResponse of NonpagedListAssemblyUnitLineComponent</returns>
        ApiResponse<NonpagedListAssemblyUnitLineComponent> CostdataAssemblyCatalogsByCatIdCostLinesByLineIdComponentsGetWithHttpInfo (string catId, string lineId, List<string> expand = null);
        /// <summary>
        /// Gets a list of localized assembly cost lines
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="searchTerm">If supplied, returns only assembly lines containing the specified search terms. (optional)</param>
        /// <param name="divisionCode">If supplied, searches within a specified division. Accepts division codes for any level in the hierarchy. (optional)</param>
        /// <param name="expand">A list of properties to expand. Applies only to expandable properties. (optional)</param>
        /// <param name="offset">For paging, specify the offset from which to start returning results. Defaults to zero. (optional)</param>
        /// <param name="limit">For paging, specify the maximum number of Assembly lines to return in a single request. Defaults to 25 and Max value is 100. (optional)</param>
        /// <returns>PagedListAssemblyCostLine</returns>
        PagedListAssemblyCostLine CostdataAssemblyCatalogsByCatIdCostLinesGet (string catId, string searchTerm = null, string divisionCode = null, List<string> expand = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Gets a list of localized assembly cost lines
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="searchTerm">If supplied, returns only assembly lines containing the specified search terms. (optional)</param>
        /// <param name="divisionCode">If supplied, searches within a specified division. Accepts division codes for any level in the hierarchy. (optional)</param>
        /// <param name="expand">A list of properties to expand. Applies only to expandable properties. (optional)</param>
        /// <param name="offset">For paging, specify the offset from which to start returning results. Defaults to zero. (optional)</param>
        /// <param name="limit">For paging, specify the maximum number of Assembly lines to return in a single request. Defaults to 25 and Max value is 100. (optional)</param>
        /// <returns>ApiResponse of PagedListAssemblyCostLine</returns>
        ApiResponse<PagedListAssemblyCostLine> CostdataAssemblyCatalogsByCatIdCostLinesGetWithHttpInfo (string catId, string searchTerm = null, string divisionCode = null, List<string> expand = null, int? offset = null, int? limit = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets a single localized assembly cost line.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="id">The assembly line identifier.</param>
        /// <param name="expand">A list of properties to expand. Applies only to expandable properties. (optional)</param>
        /// <returns>Task of AssemblyCostLine</returns>
        System.Threading.Tasks.Task<AssemblyCostLine> CostdataAssemblyCatalogsByCatIdCostLinesByIdGetAsync (string catId, string id, List<string> expand = null);

        /// <summary>
        /// Gets a single localized assembly cost line.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="id">The assembly line identifier.</param>
        /// <param name="expand">A list of properties to expand. Applies only to expandable properties. (optional)</param>
        /// <returns>Task of ApiResponse (AssemblyCostLine)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssemblyCostLine>> CostdataAssemblyCatalogsByCatIdCostLinesByIdGetAsyncWithHttpInfo (string catId, string id, List<string> expand = null);
        /// <summary>
        /// Gets a single assembly unit cost line detail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="lineId">The assembly line identifier.</param>
        /// <param name="id">The unit line identifier.</param>
        /// <param name="expand">A list of properties to expand. Applies only to expandable properties. (optional)</param>
        /// <returns>Task of AssemblyUnitLineComponent</returns>
        System.Threading.Tasks.Task<AssemblyUnitLineComponent> CostdataAssemblyCatalogsByCatIdCostLinesByLineIdComponentsByIdGetAsync (string catId, string lineId, string id, List<string> expand = null);

        /// <summary>
        /// Gets a single assembly unit cost line detail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="lineId">The assembly line identifier.</param>
        /// <param name="id">The unit line identifier.</param>
        /// <param name="expand">A list of properties to expand. Applies only to expandable properties. (optional)</param>
        /// <returns>Task of ApiResponse (AssemblyUnitLineComponent)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssemblyUnitLineComponent>> CostdataAssemblyCatalogsByCatIdCostLinesByLineIdComponentsByIdGetAsyncWithHttpInfo (string catId, string lineId, string id, List<string> expand = null);
        /// <summary>
        /// Gets list of assembly unit cost lines detail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="lineId">The assembly line identifier.</param>
        /// <param name="expand">A list of properties to expand. Applies only to expandable properties. (optional)</param>
        /// <returns>Task of NonpagedListAssemblyUnitLineComponent</returns>
        System.Threading.Tasks.Task<NonpagedListAssemblyUnitLineComponent> CostdataAssemblyCatalogsByCatIdCostLinesByLineIdComponentsGetAsync (string catId, string lineId, List<string> expand = null);

        /// <summary>
        /// Gets list of assembly unit cost lines detail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="lineId">The assembly line identifier.</param>
        /// <param name="expand">A list of properties to expand. Applies only to expandable properties. (optional)</param>
        /// <returns>Task of ApiResponse (NonpagedListAssemblyUnitLineComponent)</returns>
        System.Threading.Tasks.Task<ApiResponse<NonpagedListAssemblyUnitLineComponent>> CostdataAssemblyCatalogsByCatIdCostLinesByLineIdComponentsGetAsyncWithHttpInfo (string catId, string lineId, List<string> expand = null);
        /// <summary>
        /// Gets a list of localized assembly cost lines
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="searchTerm">If supplied, returns only assembly lines containing the specified search terms. (optional)</param>
        /// <param name="divisionCode">If supplied, searches within a specified division. Accepts division codes for any level in the hierarchy. (optional)</param>
        /// <param name="expand">A list of properties to expand. Applies only to expandable properties. (optional)</param>
        /// <param name="offset">For paging, specify the offset from which to start returning results. Defaults to zero. (optional)</param>
        /// <param name="limit">For paging, specify the maximum number of Assembly lines to return in a single request. Defaults to 25 and Max value is 100. (optional)</param>
        /// <returns>Task of PagedListAssemblyCostLine</returns>
        System.Threading.Tasks.Task<PagedListAssemblyCostLine> CostdataAssemblyCatalogsByCatIdCostLinesGetAsync (string catId, string searchTerm = null, string divisionCode = null, List<string> expand = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Gets a list of localized assembly cost lines
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="searchTerm">If supplied, returns only assembly lines containing the specified search terms. (optional)</param>
        /// <param name="divisionCode">If supplied, searches within a specified division. Accepts division codes for any level in the hierarchy. (optional)</param>
        /// <param name="expand">A list of properties to expand. Applies only to expandable properties. (optional)</param>
        /// <param name="offset">For paging, specify the offset from which to start returning results. Defaults to zero. (optional)</param>
        /// <param name="limit">For paging, specify the maximum number of Assembly lines to return in a single request. Defaults to 25 and Max value is 100. (optional)</param>
        /// <returns>Task of ApiResponse (PagedListAssemblyCostLine)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedListAssemblyCostLine>> CostdataAssemblyCatalogsByCatIdCostLinesGetAsyncWithHttpInfo (string catId, string searchTerm = null, string divisionCode = null, List<string> expand = null, int? offset = null, int? limit = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CostDataAssemblyCostLinesApi : ICostDataAssemblyCostLinesApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CostDataAssemblyCostLinesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CostDataAssemblyCostLinesApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CostDataAssemblyCostLinesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CostDataAssemblyCostLinesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets a single localized assembly cost line. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="id">The assembly line identifier.</param>
        /// <param name="expand">A list of properties to expand. Applies only to expandable properties. (optional)</param>
        /// <returns>AssemblyCostLine</returns>
        public AssemblyCostLine CostdataAssemblyCatalogsByCatIdCostLinesByIdGet (string catId, string id, List<string> expand = null)
        {
             ApiResponse<AssemblyCostLine> localVarResponse = CostdataAssemblyCatalogsByCatIdCostLinesByIdGetWithHttpInfo(catId, id, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a single localized assembly cost line. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="id">The assembly line identifier.</param>
        /// <param name="expand">A list of properties to expand. Applies only to expandable properties. (optional)</param>
        /// <returns>ApiResponse of AssemblyCostLine</returns>
        public ApiResponse< AssemblyCostLine > CostdataAssemblyCatalogsByCatIdCostLinesByIdGetWithHttpInfo (string catId, string id, List<string> expand = null)
        {
            // verify the required parameter 'catId' is set
            if (catId == null)
                throw new ApiException(400, "Missing required parameter 'catId' when calling CostDataAssemblyCostLinesApi->CostdataAssemblyCatalogsByCatIdCostLinesByIdGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CostDataAssemblyCostLinesApi->CostdataAssemblyCatalogsByCatIdCostLinesByIdGet");

            var localVarPath = "/v1/costdata/assembly/catalogs/{catId}/costlines/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (catId != null) localVarPathParams.Add("catId", this.Configuration.ApiClient.ParameterToString(catId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "expand", expand)); // query parameter

            // authentication (rsmids_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CostdataAssemblyCatalogsByCatIdCostLinesByIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssemblyCostLine>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AssemblyCostLine) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssemblyCostLine)));
        }

        /// <summary>
        /// Gets a single localized assembly cost line. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="id">The assembly line identifier.</param>
        /// <param name="expand">A list of properties to expand. Applies only to expandable properties. (optional)</param>
        /// <returns>Task of AssemblyCostLine</returns>
        public async System.Threading.Tasks.Task<AssemblyCostLine> CostdataAssemblyCatalogsByCatIdCostLinesByIdGetAsync (string catId, string id, List<string> expand = null)
        {
             ApiResponse<AssemblyCostLine> localVarResponse = await CostdataAssemblyCatalogsByCatIdCostLinesByIdGetAsyncWithHttpInfo(catId, id, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a single localized assembly cost line. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="id">The assembly line identifier.</param>
        /// <param name="expand">A list of properties to expand. Applies only to expandable properties. (optional)</param>
        /// <returns>Task of ApiResponse (AssemblyCostLine)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssemblyCostLine>> CostdataAssemblyCatalogsByCatIdCostLinesByIdGetAsyncWithHttpInfo (string catId, string id, List<string> expand = null)
        {
            // verify the required parameter 'catId' is set
            if (catId == null)
                throw new ApiException(400, "Missing required parameter 'catId' when calling CostDataAssemblyCostLinesApi->CostdataAssemblyCatalogsByCatIdCostLinesByIdGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CostDataAssemblyCostLinesApi->CostdataAssemblyCatalogsByCatIdCostLinesByIdGet");

            var localVarPath = "/v1/costdata/assembly/catalogs/{catId}/costlines/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (catId != null) localVarPathParams.Add("catId", this.Configuration.ApiClient.ParameterToString(catId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "expand", expand)); // query parameter

            // authentication (rsmids_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CostdataAssemblyCatalogsByCatIdCostLinesByIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssemblyCostLine>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AssemblyCostLine) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssemblyCostLine)));
        }

        /// <summary>
        /// Gets a single assembly unit cost line detail. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="lineId">The assembly line identifier.</param>
        /// <param name="id">The unit line identifier.</param>
        /// <param name="expand">A list of properties to expand. Applies only to expandable properties. (optional)</param>
        /// <returns>AssemblyUnitLineComponent</returns>
        public AssemblyUnitLineComponent CostdataAssemblyCatalogsByCatIdCostLinesByLineIdComponentsByIdGet (string catId, string lineId, string id, List<string> expand = null)
        {
             ApiResponse<AssemblyUnitLineComponent> localVarResponse = CostdataAssemblyCatalogsByCatIdCostLinesByLineIdComponentsByIdGetWithHttpInfo(catId, lineId, id, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a single assembly unit cost line detail. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="lineId">The assembly line identifier.</param>
        /// <param name="id">The unit line identifier.</param>
        /// <param name="expand">A list of properties to expand. Applies only to expandable properties. (optional)</param>
        /// <returns>ApiResponse of AssemblyUnitLineComponent</returns>
        public ApiResponse< AssemblyUnitLineComponent > CostdataAssemblyCatalogsByCatIdCostLinesByLineIdComponentsByIdGetWithHttpInfo (string catId, string lineId, string id, List<string> expand = null)
        {
            // verify the required parameter 'catId' is set
            if (catId == null)
                throw new ApiException(400, "Missing required parameter 'catId' when calling CostDataAssemblyCostLinesApi->CostdataAssemblyCatalogsByCatIdCostLinesByLineIdComponentsByIdGet");
            // verify the required parameter 'lineId' is set
            if (lineId == null)
                throw new ApiException(400, "Missing required parameter 'lineId' when calling CostDataAssemblyCostLinesApi->CostdataAssemblyCatalogsByCatIdCostLinesByLineIdComponentsByIdGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CostDataAssemblyCostLinesApi->CostdataAssemblyCatalogsByCatIdCostLinesByLineIdComponentsByIdGet");

            var localVarPath = "/v1/costdata/assembly/catalogs/{catId}/costlines/{lineId}/components/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (catId != null) localVarPathParams.Add("catId", this.Configuration.ApiClient.ParameterToString(catId)); // path parameter
            if (lineId != null) localVarPathParams.Add("lineId", this.Configuration.ApiClient.ParameterToString(lineId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "expand", expand)); // query parameter

            // authentication (rsmids_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CostdataAssemblyCatalogsByCatIdCostLinesByLineIdComponentsByIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssemblyUnitLineComponent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AssemblyUnitLineComponent) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssemblyUnitLineComponent)));
        }

        /// <summary>
        /// Gets a single assembly unit cost line detail. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="lineId">The assembly line identifier.</param>
        /// <param name="id">The unit line identifier.</param>
        /// <param name="expand">A list of properties to expand. Applies only to expandable properties. (optional)</param>
        /// <returns>Task of AssemblyUnitLineComponent</returns>
        public async System.Threading.Tasks.Task<AssemblyUnitLineComponent> CostdataAssemblyCatalogsByCatIdCostLinesByLineIdComponentsByIdGetAsync (string catId, string lineId, string id, List<string> expand = null)
        {
             ApiResponse<AssemblyUnitLineComponent> localVarResponse = await CostdataAssemblyCatalogsByCatIdCostLinesByLineIdComponentsByIdGetAsyncWithHttpInfo(catId, lineId, id, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a single assembly unit cost line detail. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="lineId">The assembly line identifier.</param>
        /// <param name="id">The unit line identifier.</param>
        /// <param name="expand">A list of properties to expand. Applies only to expandable properties. (optional)</param>
        /// <returns>Task of ApiResponse (AssemblyUnitLineComponent)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssemblyUnitLineComponent>> CostdataAssemblyCatalogsByCatIdCostLinesByLineIdComponentsByIdGetAsyncWithHttpInfo (string catId, string lineId, string id, List<string> expand = null)
        {
            // verify the required parameter 'catId' is set
            if (catId == null)
                throw new ApiException(400, "Missing required parameter 'catId' when calling CostDataAssemblyCostLinesApi->CostdataAssemblyCatalogsByCatIdCostLinesByLineIdComponentsByIdGet");
            // verify the required parameter 'lineId' is set
            if (lineId == null)
                throw new ApiException(400, "Missing required parameter 'lineId' when calling CostDataAssemblyCostLinesApi->CostdataAssemblyCatalogsByCatIdCostLinesByLineIdComponentsByIdGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CostDataAssemblyCostLinesApi->CostdataAssemblyCatalogsByCatIdCostLinesByLineIdComponentsByIdGet");

            var localVarPath = "/v1/costdata/assembly/catalogs/{catId}/costlines/{lineId}/components/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (catId != null) localVarPathParams.Add("catId", this.Configuration.ApiClient.ParameterToString(catId)); // path parameter
            if (lineId != null) localVarPathParams.Add("lineId", this.Configuration.ApiClient.ParameterToString(lineId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "expand", expand)); // query parameter

            // authentication (rsmids_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CostdataAssemblyCatalogsByCatIdCostLinesByLineIdComponentsByIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssemblyUnitLineComponent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AssemblyUnitLineComponent) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssemblyUnitLineComponent)));
        }

        /// <summary>
        /// Gets list of assembly unit cost lines detail. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="lineId">The assembly line identifier.</param>
        /// <param name="expand">A list of properties to expand. Applies only to expandable properties. (optional)</param>
        /// <returns>NonpagedListAssemblyUnitLineComponent</returns>
        public NonpagedListAssemblyUnitLineComponent CostdataAssemblyCatalogsByCatIdCostLinesByLineIdComponentsGet (string catId, string lineId, List<string> expand = null)
        {
             ApiResponse<NonpagedListAssemblyUnitLineComponent> localVarResponse = CostdataAssemblyCatalogsByCatIdCostLinesByLineIdComponentsGetWithHttpInfo(catId, lineId, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets list of assembly unit cost lines detail. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="lineId">The assembly line identifier.</param>
        /// <param name="expand">A list of properties to expand. Applies only to expandable properties. (optional)</param>
        /// <returns>ApiResponse of NonpagedListAssemblyUnitLineComponent</returns>
        public ApiResponse< NonpagedListAssemblyUnitLineComponent > CostdataAssemblyCatalogsByCatIdCostLinesByLineIdComponentsGetWithHttpInfo (string catId, string lineId, List<string> expand = null)
        {
            // verify the required parameter 'catId' is set
            if (catId == null)
                throw new ApiException(400, "Missing required parameter 'catId' when calling CostDataAssemblyCostLinesApi->CostdataAssemblyCatalogsByCatIdCostLinesByLineIdComponentsGet");
            // verify the required parameter 'lineId' is set
            if (lineId == null)
                throw new ApiException(400, "Missing required parameter 'lineId' when calling CostDataAssemblyCostLinesApi->CostdataAssemblyCatalogsByCatIdCostLinesByLineIdComponentsGet");

            var localVarPath = "/v1/costdata/assembly/catalogs/{catId}/costlines/{lineId}/components";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (catId != null) localVarPathParams.Add("catId", this.Configuration.ApiClient.ParameterToString(catId)); // path parameter
            if (lineId != null) localVarPathParams.Add("lineId", this.Configuration.ApiClient.ParameterToString(lineId)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "expand", expand)); // query parameter

            // authentication (rsmids_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CostdataAssemblyCatalogsByCatIdCostLinesByLineIdComponentsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NonpagedListAssemblyUnitLineComponent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NonpagedListAssemblyUnitLineComponent) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NonpagedListAssemblyUnitLineComponent)));
        }

        /// <summary>
        /// Gets list of assembly unit cost lines detail. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="lineId">The assembly line identifier.</param>
        /// <param name="expand">A list of properties to expand. Applies only to expandable properties. (optional)</param>
        /// <returns>Task of NonpagedListAssemblyUnitLineComponent</returns>
        public async System.Threading.Tasks.Task<NonpagedListAssemblyUnitLineComponent> CostdataAssemblyCatalogsByCatIdCostLinesByLineIdComponentsGetAsync (string catId, string lineId, List<string> expand = null)
        {
             ApiResponse<NonpagedListAssemblyUnitLineComponent> localVarResponse = await CostdataAssemblyCatalogsByCatIdCostLinesByLineIdComponentsGetAsyncWithHttpInfo(catId, lineId, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets list of assembly unit cost lines detail. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="lineId">The assembly line identifier.</param>
        /// <param name="expand">A list of properties to expand. Applies only to expandable properties. (optional)</param>
        /// <returns>Task of ApiResponse (NonpagedListAssemblyUnitLineComponent)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NonpagedListAssemblyUnitLineComponent>> CostdataAssemblyCatalogsByCatIdCostLinesByLineIdComponentsGetAsyncWithHttpInfo (string catId, string lineId, List<string> expand = null)
        {
            // verify the required parameter 'catId' is set
            if (catId == null)
                throw new ApiException(400, "Missing required parameter 'catId' when calling CostDataAssemblyCostLinesApi->CostdataAssemblyCatalogsByCatIdCostLinesByLineIdComponentsGet");
            // verify the required parameter 'lineId' is set
            if (lineId == null)
                throw new ApiException(400, "Missing required parameter 'lineId' when calling CostDataAssemblyCostLinesApi->CostdataAssemblyCatalogsByCatIdCostLinesByLineIdComponentsGet");

            var localVarPath = "/v1/costdata/assembly/catalogs/{catId}/costlines/{lineId}/components";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (catId != null) localVarPathParams.Add("catId", this.Configuration.ApiClient.ParameterToString(catId)); // path parameter
            if (lineId != null) localVarPathParams.Add("lineId", this.Configuration.ApiClient.ParameterToString(lineId)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "expand", expand)); // query parameter

            // authentication (rsmids_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CostdataAssemblyCatalogsByCatIdCostLinesByLineIdComponentsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NonpagedListAssemblyUnitLineComponent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NonpagedListAssemblyUnitLineComponent) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NonpagedListAssemblyUnitLineComponent)));
        }

        /// <summary>
        /// Gets a list of localized assembly cost lines 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="searchTerm">If supplied, returns only assembly lines containing the specified search terms. (optional)</param>
        /// <param name="divisionCode">If supplied, searches within a specified division. Accepts division codes for any level in the hierarchy. (optional)</param>
        /// <param name="expand">A list of properties to expand. Applies only to expandable properties. (optional)</param>
        /// <param name="offset">For paging, specify the offset from which to start returning results. Defaults to zero. (optional)</param>
        /// <param name="limit">For paging, specify the maximum number of Assembly lines to return in a single request. Defaults to 25 and Max value is 100. (optional)</param>
        /// <returns>PagedListAssemblyCostLine</returns>
        public PagedListAssemblyCostLine CostdataAssemblyCatalogsByCatIdCostLinesGet (string catId, string searchTerm = null, string divisionCode = null, List<string> expand = null, int? offset = null, int? limit = null)
        {
             ApiResponse<PagedListAssemblyCostLine> localVarResponse = CostdataAssemblyCatalogsByCatIdCostLinesGetWithHttpInfo(catId, searchTerm, divisionCode, expand, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of localized assembly cost lines 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="searchTerm">If supplied, returns only assembly lines containing the specified search terms. (optional)</param>
        /// <param name="divisionCode">If supplied, searches within a specified division. Accepts division codes for any level in the hierarchy. (optional)</param>
        /// <param name="expand">A list of properties to expand. Applies only to expandable properties. (optional)</param>
        /// <param name="offset">For paging, specify the offset from which to start returning results. Defaults to zero. (optional)</param>
        /// <param name="limit">For paging, specify the maximum number of Assembly lines to return in a single request. Defaults to 25 and Max value is 100. (optional)</param>
        /// <returns>ApiResponse of PagedListAssemblyCostLine</returns>
        public ApiResponse< PagedListAssemblyCostLine > CostdataAssemblyCatalogsByCatIdCostLinesGetWithHttpInfo (string catId, string searchTerm = null, string divisionCode = null, List<string> expand = null, int? offset = null, int? limit = null)
        {
            // verify the required parameter 'catId' is set
            if (catId == null)
                throw new ApiException(400, "Missing required parameter 'catId' when calling CostDataAssemblyCostLinesApi->CostdataAssemblyCatalogsByCatIdCostLinesGet");

            var localVarPath = "/v1/costdata/assembly/catalogs/{catId}/costlines";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (catId != null) localVarPathParams.Add("catId", this.Configuration.ApiClient.ParameterToString(catId)); // path parameter
            if (searchTerm != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchTerm", searchTerm)); // query parameter
            if (divisionCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "divisionCode", divisionCode)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "expand", expand)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (rsmids_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CostdataAssemblyCatalogsByCatIdCostLinesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedListAssemblyCostLine>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedListAssemblyCostLine) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedListAssemblyCostLine)));
        }

        /// <summary>
        /// Gets a list of localized assembly cost lines 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="searchTerm">If supplied, returns only assembly lines containing the specified search terms. (optional)</param>
        /// <param name="divisionCode">If supplied, searches within a specified division. Accepts division codes for any level in the hierarchy. (optional)</param>
        /// <param name="expand">A list of properties to expand. Applies only to expandable properties. (optional)</param>
        /// <param name="offset">For paging, specify the offset from which to start returning results. Defaults to zero. (optional)</param>
        /// <param name="limit">For paging, specify the maximum number of Assembly lines to return in a single request. Defaults to 25 and Max value is 100. (optional)</param>
        /// <returns>Task of PagedListAssemblyCostLine</returns>
        public async System.Threading.Tasks.Task<PagedListAssemblyCostLine> CostdataAssemblyCatalogsByCatIdCostLinesGetAsync (string catId, string searchTerm = null, string divisionCode = null, List<string> expand = null, int? offset = null, int? limit = null)
        {
             ApiResponse<PagedListAssemblyCostLine> localVarResponse = await CostdataAssemblyCatalogsByCatIdCostLinesGetAsyncWithHttpInfo(catId, searchTerm, divisionCode, expand, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of localized assembly cost lines 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="searchTerm">If supplied, returns only assembly lines containing the specified search terms. (optional)</param>
        /// <param name="divisionCode">If supplied, searches within a specified division. Accepts division codes for any level in the hierarchy. (optional)</param>
        /// <param name="expand">A list of properties to expand. Applies only to expandable properties. (optional)</param>
        /// <param name="offset">For paging, specify the offset from which to start returning results. Defaults to zero. (optional)</param>
        /// <param name="limit">For paging, specify the maximum number of Assembly lines to return in a single request. Defaults to 25 and Max value is 100. (optional)</param>
        /// <returns>Task of ApiResponse (PagedListAssemblyCostLine)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedListAssemblyCostLine>> CostdataAssemblyCatalogsByCatIdCostLinesGetAsyncWithHttpInfo (string catId, string searchTerm = null, string divisionCode = null, List<string> expand = null, int? offset = null, int? limit = null)
        {
            // verify the required parameter 'catId' is set
            if (catId == null)
                throw new ApiException(400, "Missing required parameter 'catId' when calling CostDataAssemblyCostLinesApi->CostdataAssemblyCatalogsByCatIdCostLinesGet");

            var localVarPath = "/v1/costdata/assembly/catalogs/{catId}/costlines";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (catId != null) localVarPathParams.Add("catId", this.Configuration.ApiClient.ParameterToString(catId)); // path parameter
            if (searchTerm != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchTerm", searchTerm)); // query parameter
            if (divisionCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "divisionCode", divisionCode)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "expand", expand)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (rsmids_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CostdataAssemblyCatalogsByCatIdCostLinesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedListAssemblyCostLine>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedListAssemblyCostLine) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedListAssemblyCostLine)));
        }

    }
}
