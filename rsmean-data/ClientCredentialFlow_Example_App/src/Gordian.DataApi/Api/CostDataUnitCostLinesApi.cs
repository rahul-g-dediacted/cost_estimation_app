/* 
 * RSMeans Consumer REST API V1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using Gordian.DataApi.Client;
using Gordian.DataApi.Model;
using RestSharp;

namespace Gordian.DataApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICostDataUnitCostLinesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets a single localized unit cost line.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="id">The unit line identifier.</param>
        /// <param name="expand">A list of properties to expand. Applies only to expandable properties. (optional)</param>
        /// <returns>UnitCostLine</returns>
        UnitCostLine CostdataUnitCatalogsByCatIdCostLinesByIdGet (string catId, string id, List<string> expand = null);

        /// <summary>
        /// Gets a single localized unit cost line.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="id">The unit line identifier.</param>
        /// <param name="expand">A list of properties to expand. Applies only to expandable properties. (optional)</param>
        /// <returns>ApiResponse of UnitCostLine</returns>
        ApiResponse<UnitCostLine> CostdataUnitCatalogsByCatIdCostLinesByIdGetWithHttpInfo (string catId, string id, List<string> expand = null);
        /// <summary>
        /// Gets a list of localized unit cost lines
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="searchTerm">If supplied, returns only unit lines containing the specified search terms. (optional)</param>
        /// <param name="divisionCode">If supplied, searches within a specified division. Accepts division codes for any level in the hierarchy (two, four, six or eight digit division codes). (optional)</param>
        /// <param name="expand">A list of properties to expand. Applies only to expandable properties. (optional)</param>
        /// <param name="offset">For paging, specify the offset from which to start returning results. Defaults to zero. (optional)</param>
        /// <param name="limit">For paging, specify the maximum number of unit lines to return in a single request. Defaults to 25 and Max value is 100. (optional)</param>
        /// <returns>PagedListUnitCostLine</returns>
        PagedListUnitCostLine CostdataUnitCatalogsByCatIdCostLinesGet (string catId, string searchTerm = null, string divisionCode = null, List<string> expand = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Gets a list of localized unit cost lines
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="searchTerm">If supplied, returns only unit lines containing the specified search terms. (optional)</param>
        /// <param name="divisionCode">If supplied, searches within a specified division. Accepts division codes for any level in the hierarchy (two, four, six or eight digit division codes). (optional)</param>
        /// <param name="expand">A list of properties to expand. Applies only to expandable properties. (optional)</param>
        /// <param name="offset">For paging, specify the offset from which to start returning results. Defaults to zero. (optional)</param>
        /// <param name="limit">For paging, specify the maximum number of unit lines to return in a single request. Defaults to 25 and Max value is 100. (optional)</param>
        /// <returns>ApiResponse of PagedListUnitCostLine</returns>
        ApiResponse<PagedListUnitCostLine> CostdataUnitCatalogsByCatIdCostLinesGetWithHttpInfo (string catId, string searchTerm = null, string divisionCode = null, List<string> expand = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Gets a list of localized unit cost lines with aggregations at the top division level.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="includeDivisionCount">If true, the search result will include the number of unit lines that match the key word search for each division. Defaults to true. (optional)</param>
        /// <param name="includeCostLines">If true, the search result will include unit lines that match the key word search. Defaults to true. (optional)</param>
        /// <param name="sortByLineNumber">If true, the search result will sorted by CSI numbers. Defaults to true. (optional)</param>
        /// <param name="costLineType">If supplied, returns only unit lines of the specified type. Default to all types. (optional)</param>
        /// <param name="searchTerm">If supplied, returns only unit lines containing the specified search terms. (optional)</param>
        /// <param name="divisionCode">If supplied, searches within a specified division. Accepts division codes for any level in the hierarchy (two, four, six or eight digit division codes). (optional)</param>
        /// <param name="offset">For paging, specify the offset from which to start returning results. Defaults to zero. (optional)</param>
        /// <param name="limit">For paging, specify the maximum number of unit lines to return in a single request. Defaults to 25 and Max value is 100. (optional)</param>
        /// <returns>UnitLineSearchResult</returns>
        UnitLineSearchResult CostdataUnitCatalogsByCatIdCostLinesSearchGet (string catId, bool? includeDivisionCount = null, bool? includeCostLines = null, bool? sortByLineNumber = null, string costLineType = null, string searchTerm = null, string divisionCode = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Gets a list of localized unit cost lines with aggregations at the top division level.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="includeDivisionCount">If true, the search result will include the number of unit lines that match the key word search for each division. Defaults to true. (optional)</param>
        /// <param name="includeCostLines">If true, the search result will include unit lines that match the key word search. Defaults to true. (optional)</param>
        /// <param name="sortByLineNumber">If true, the search result will sorted by CSI numbers. Defaults to true. (optional)</param>
        /// <param name="costLineType">If supplied, returns only unit lines of the specified type. Default to all types. (optional)</param>
        /// <param name="searchTerm">If supplied, returns only unit lines containing the specified search terms. (optional)</param>
        /// <param name="divisionCode">If supplied, searches within a specified division. Accepts division codes for any level in the hierarchy (two, four, six or eight digit division codes). (optional)</param>
        /// <param name="offset">For paging, specify the offset from which to start returning results. Defaults to zero. (optional)</param>
        /// <param name="limit">For paging, specify the maximum number of unit lines to return in a single request. Defaults to 25 and Max value is 100. (optional)</param>
        /// <returns>ApiResponse of UnitLineSearchResult</returns>
        ApiResponse<UnitLineSearchResult> CostdataUnitCatalogsByCatIdCostLinesSearchGetWithHttpInfo (string catId, bool? includeDivisionCount = null, bool? includeCostLines = null, bool? sortByLineNumber = null, string costLineType = null, string searchTerm = null, string divisionCode = null, int? offset = null, int? limit = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets a single localized unit cost line.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="id">The unit line identifier.</param>
        /// <param name="expand">A list of properties to expand. Applies only to expandable properties. (optional)</param>
        /// <returns>Task of UnitCostLine</returns>
        System.Threading.Tasks.Task<UnitCostLine> CostdataUnitCatalogsByCatIdCostLinesByIdGetAsync (string catId, string id, List<string> expand = null);

        /// <summary>
        /// Gets a single localized unit cost line.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="id">The unit line identifier.</param>
        /// <param name="expand">A list of properties to expand. Applies only to expandable properties. (optional)</param>
        /// <returns>Task of ApiResponse (UnitCostLine)</returns>
        System.Threading.Tasks.Task<ApiResponse<UnitCostLine>> CostdataUnitCatalogsByCatIdCostLinesByIdGetAsyncWithHttpInfo (string catId, string id, List<string> expand = null);
        /// <summary>
        /// Gets a list of localized unit cost lines
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="searchTerm">If supplied, returns only unit lines containing the specified search terms. (optional)</param>
        /// <param name="divisionCode">If supplied, searches within a specified division. Accepts division codes for any level in the hierarchy (two, four, six or eight digit division codes). (optional)</param>
        /// <param name="expand">A list of properties to expand. Applies only to expandable properties. (optional)</param>
        /// <param name="offset">For paging, specify the offset from which to start returning results. Defaults to zero. (optional)</param>
        /// <param name="limit">For paging, specify the maximum number of unit lines to return in a single request. Defaults to 25 and Max value is 100. (optional)</param>
        /// <returns>Task of PagedListUnitCostLine</returns>
        System.Threading.Tasks.Task<PagedListUnitCostLine> CostdataUnitCatalogsByCatIdCostLinesGetAsync (string catId, string searchTerm = null, string divisionCode = null, List<string> expand = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Gets a list of localized unit cost lines
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="searchTerm">If supplied, returns only unit lines containing the specified search terms. (optional)</param>
        /// <param name="divisionCode">If supplied, searches within a specified division. Accepts division codes for any level in the hierarchy (two, four, six or eight digit division codes). (optional)</param>
        /// <param name="expand">A list of properties to expand. Applies only to expandable properties. (optional)</param>
        /// <param name="offset">For paging, specify the offset from which to start returning results. Defaults to zero. (optional)</param>
        /// <param name="limit">For paging, specify the maximum number of unit lines to return in a single request. Defaults to 25 and Max value is 100. (optional)</param>
        /// <returns>Task of ApiResponse (PagedListUnitCostLine)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedListUnitCostLine>> CostdataUnitCatalogsByCatIdCostLinesGetAsyncWithHttpInfo (string catId, string searchTerm = null, string divisionCode = null, List<string> expand = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Gets a list of localized unit cost lines with aggregations at the top division level.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="includeDivisionCount">If true, the search result will include the number of unit lines that match the key word search for each division. Defaults to true. (optional)</param>
        /// <param name="includeCostLines">If true, the search result will include unit lines that match the key word search. Defaults to true. (optional)</param>
        /// <param name="sortByLineNumber">If true, the search result will sorted by CSI numbers. Defaults to true. (optional)</param>
        /// <param name="costLineType">If supplied, returns only unit lines of the specified type. Default to all types. (optional)</param>
        /// <param name="searchTerm">If supplied, returns only unit lines containing the specified search terms. (optional)</param>
        /// <param name="divisionCode">If supplied, searches within a specified division. Accepts division codes for any level in the hierarchy (two, four, six or eight digit division codes). (optional)</param>
        /// <param name="offset">For paging, specify the offset from which to start returning results. Defaults to zero. (optional)</param>
        /// <param name="limit">For paging, specify the maximum number of unit lines to return in a single request. Defaults to 25 and Max value is 100. (optional)</param>
        /// <returns>Task of UnitLineSearchResult</returns>
        System.Threading.Tasks.Task<UnitLineSearchResult> CostdataUnitCatalogsByCatIdCostLinesSearchGetAsync (string catId, bool? includeDivisionCount = null, bool? includeCostLines = null, bool? sortByLineNumber = null, string costLineType = null, string searchTerm = null, string divisionCode = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Gets a list of localized unit cost lines with aggregations at the top division level.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="includeDivisionCount">If true, the search result will include the number of unit lines that match the key word search for each division. Defaults to true. (optional)</param>
        /// <param name="includeCostLines">If true, the search result will include unit lines that match the key word search. Defaults to true. (optional)</param>
        /// <param name="sortByLineNumber">If true, the search result will sorted by CSI numbers. Defaults to true. (optional)</param>
        /// <param name="costLineType">If supplied, returns only unit lines of the specified type. Default to all types. (optional)</param>
        /// <param name="searchTerm">If supplied, returns only unit lines containing the specified search terms. (optional)</param>
        /// <param name="divisionCode">If supplied, searches within a specified division. Accepts division codes for any level in the hierarchy (two, four, six or eight digit division codes). (optional)</param>
        /// <param name="offset">For paging, specify the offset from which to start returning results. Defaults to zero. (optional)</param>
        /// <param name="limit">For paging, specify the maximum number of unit lines to return in a single request. Defaults to 25 and Max value is 100. (optional)</param>
        /// <returns>Task of ApiResponse (UnitLineSearchResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<UnitLineSearchResult>> CostdataUnitCatalogsByCatIdCostLinesSearchGetAsyncWithHttpInfo (string catId, bool? includeDivisionCount = null, bool? includeCostLines = null, bool? sortByLineNumber = null, string costLineType = null, string searchTerm = null, string divisionCode = null, int? offset = null, int? limit = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CostDataUnitCostLinesApi : ICostDataUnitCostLinesApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CostDataUnitCostLinesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CostDataUnitCostLinesApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CostDataUnitCostLinesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CostDataUnitCostLinesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets a single localized unit cost line. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="id">The unit line identifier.</param>
        /// <param name="expand">A list of properties to expand. Applies only to expandable properties. (optional)</param>
        /// <returns>UnitCostLine</returns>
        public UnitCostLine CostdataUnitCatalogsByCatIdCostLinesByIdGet (string catId, string id, List<string> expand = null)
        {
             ApiResponse<UnitCostLine> localVarResponse = CostdataUnitCatalogsByCatIdCostLinesByIdGetWithHttpInfo(catId, id, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a single localized unit cost line. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="id">The unit line identifier.</param>
        /// <param name="expand">A list of properties to expand. Applies only to expandable properties. (optional)</param>
        /// <returns>ApiResponse of UnitCostLine</returns>
        public ApiResponse< UnitCostLine > CostdataUnitCatalogsByCatIdCostLinesByIdGetWithHttpInfo (string catId, string id, List<string> expand = null)
        {
            // verify the required parameter 'catId' is set
            if (catId == null)
                throw new ApiException(400, "Missing required parameter 'catId' when calling CostDataUnitCostLinesApi->CostdataUnitCatalogsByCatIdCostLinesByIdGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CostDataUnitCostLinesApi->CostdataUnitCatalogsByCatIdCostLinesByIdGet");

            var localVarPath = "/v1/costdata/unit/catalogs/{catId}/costlines/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (catId != null) localVarPathParams.Add("catId", this.Configuration.ApiClient.ParameterToString(catId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "expand", expand)); // query parameter

            // authentication (rsmids_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CostdataUnitCatalogsByCatIdCostLinesByIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnitCostLine>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnitCostLine) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnitCostLine)));
        }

        /// <summary>
        /// Gets a single localized unit cost line. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="id">The unit line identifier.</param>
        /// <param name="expand">A list of properties to expand. Applies only to expandable properties. (optional)</param>
        /// <returns>Task of UnitCostLine</returns>
        public async System.Threading.Tasks.Task<UnitCostLine> CostdataUnitCatalogsByCatIdCostLinesByIdGetAsync (string catId, string id, List<string> expand = null)
        {
             ApiResponse<UnitCostLine> localVarResponse = await CostdataUnitCatalogsByCatIdCostLinesByIdGetAsyncWithHttpInfo(catId, id, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a single localized unit cost line. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="id">The unit line identifier.</param>
        /// <param name="expand">A list of properties to expand. Applies only to expandable properties. (optional)</param>
        /// <returns>Task of ApiResponse (UnitCostLine)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UnitCostLine>> CostdataUnitCatalogsByCatIdCostLinesByIdGetAsyncWithHttpInfo (string catId, string id, List<string> expand = null)
        {
            // verify the required parameter 'catId' is set
            if (catId == null)
                throw new ApiException(400, "Missing required parameter 'catId' when calling CostDataUnitCostLinesApi->CostdataUnitCatalogsByCatIdCostLinesByIdGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CostDataUnitCostLinesApi->CostdataUnitCatalogsByCatIdCostLinesByIdGet");

            var localVarPath = "/v1/costdata/unit/catalogs/{catId}/costlines/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (catId != null) localVarPathParams.Add("catId", this.Configuration.ApiClient.ParameterToString(catId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "expand", expand)); // query parameter

            // authentication (rsmids_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CostdataUnitCatalogsByCatIdCostLinesByIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnitCostLine>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnitCostLine) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnitCostLine)));
        }

        /// <summary>
        /// Gets a list of localized unit cost lines 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="searchTerm">If supplied, returns only unit lines containing the specified search terms. (optional)</param>
        /// <param name="divisionCode">If supplied, searches within a specified division. Accepts division codes for any level in the hierarchy (two, four, six or eight digit division codes). (optional)</param>
        /// <param name="expand">A list of properties to expand. Applies only to expandable properties. (optional)</param>
        /// <param name="offset">For paging, specify the offset from which to start returning results. Defaults to zero. (optional)</param>
        /// <param name="limit">For paging, specify the maximum number of unit lines to return in a single request. Defaults to 25 and Max value is 100. (optional)</param>
        /// <returns>PagedListUnitCostLine</returns>
        public PagedListUnitCostLine CostdataUnitCatalogsByCatIdCostLinesGet (string catId, string searchTerm = null, string divisionCode = null, List<string> expand = null, int? offset = null, int? limit = null)
        {
             ApiResponse<PagedListUnitCostLine> localVarResponse = CostdataUnitCatalogsByCatIdCostLinesGetWithHttpInfo(catId, searchTerm, divisionCode, expand, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of localized unit cost lines 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="searchTerm">If supplied, returns only unit lines containing the specified search terms. (optional)</param>
        /// <param name="divisionCode">If supplied, searches within a specified division. Accepts division codes for any level in the hierarchy (two, four, six or eight digit division codes). (optional)</param>
        /// <param name="expand">A list of properties to expand. Applies only to expandable properties. (optional)</param>
        /// <param name="offset">For paging, specify the offset from which to start returning results. Defaults to zero. (optional)</param>
        /// <param name="limit">For paging, specify the maximum number of unit lines to return in a single request. Defaults to 25 and Max value is 100. (optional)</param>
        /// <returns>ApiResponse of PagedListUnitCostLine</returns>
        public ApiResponse< PagedListUnitCostLine > CostdataUnitCatalogsByCatIdCostLinesGetWithHttpInfo (string catId, string searchTerm = null, string divisionCode = null, List<string> expand = null, int? offset = null, int? limit = null)
        {
            // verify the required parameter 'catId' is set
            if (catId == null)
                throw new ApiException(400, "Missing required parameter 'catId' when calling CostDataUnitCostLinesApi->CostdataUnitCatalogsByCatIdCostLinesGet");

            var localVarPath = "/v1/costdata/unit/catalogs/{catId}/costlines";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (catId != null) localVarPathParams.Add("catId", this.Configuration.ApiClient.ParameterToString(catId)); // path parameter
            if (searchTerm != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchTerm", searchTerm)); // query parameter
            if (divisionCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "divisionCode", divisionCode)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "expand", expand)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (rsmids_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CostdataUnitCatalogsByCatIdCostLinesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedListUnitCostLine>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedListUnitCostLine) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedListUnitCostLine)));
        }

        /// <summary>
        /// Gets a list of localized unit cost lines 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="searchTerm">If supplied, returns only unit lines containing the specified search terms. (optional)</param>
        /// <param name="divisionCode">If supplied, searches within a specified division. Accepts division codes for any level in the hierarchy (two, four, six or eight digit division codes). (optional)</param>
        /// <param name="expand">A list of properties to expand. Applies only to expandable properties. (optional)</param>
        /// <param name="offset">For paging, specify the offset from which to start returning results. Defaults to zero. (optional)</param>
        /// <param name="limit">For paging, specify the maximum number of unit lines to return in a single request. Defaults to 25 and Max value is 100. (optional)</param>
        /// <returns>Task of PagedListUnitCostLine</returns>
        public async System.Threading.Tasks.Task<PagedListUnitCostLine> CostdataUnitCatalogsByCatIdCostLinesGetAsync (string catId, string searchTerm = null, string divisionCode = null, List<string> expand = null, int? offset = null, int? limit = null)
        {
             ApiResponse<PagedListUnitCostLine> localVarResponse = await CostdataUnitCatalogsByCatIdCostLinesGetAsyncWithHttpInfo(catId, searchTerm, divisionCode, expand, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of localized unit cost lines 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="searchTerm">If supplied, returns only unit lines containing the specified search terms. (optional)</param>
        /// <param name="divisionCode">If supplied, searches within a specified division. Accepts division codes for any level in the hierarchy (two, four, six or eight digit division codes). (optional)</param>
        /// <param name="expand">A list of properties to expand. Applies only to expandable properties. (optional)</param>
        /// <param name="offset">For paging, specify the offset from which to start returning results. Defaults to zero. (optional)</param>
        /// <param name="limit">For paging, specify the maximum number of unit lines to return in a single request. Defaults to 25 and Max value is 100. (optional)</param>
        /// <returns>Task of ApiResponse (PagedListUnitCostLine)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedListUnitCostLine>> CostdataUnitCatalogsByCatIdCostLinesGetAsyncWithHttpInfo (string catId, string searchTerm = null, string divisionCode = null, List<string> expand = null, int? offset = null, int? limit = null)
        {
            // verify the required parameter 'catId' is set
            if (catId == null)
                throw new ApiException(400, "Missing required parameter 'catId' when calling CostDataUnitCostLinesApi->CostdataUnitCatalogsByCatIdCostLinesGet");

            var localVarPath = "/v1/costdata/unit/catalogs/{catId}/costlines";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (catId != null) localVarPathParams.Add("catId", this.Configuration.ApiClient.ParameterToString(catId)); // path parameter
            if (searchTerm != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchTerm", searchTerm)); // query parameter
            if (divisionCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "divisionCode", divisionCode)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "expand", expand)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (rsmids_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CostdataUnitCatalogsByCatIdCostLinesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedListUnitCostLine>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedListUnitCostLine) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedListUnitCostLine)));
        }

        /// <summary>
        /// Gets a list of localized unit cost lines with aggregations at the top division level. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="includeDivisionCount">If true, the search result will include the number of unit lines that match the key word search for each division. Defaults to true. (optional)</param>
        /// <param name="includeCostLines">If true, the search result will include unit lines that match the key word search. Defaults to true. (optional)</param>
        /// <param name="sortByLineNumber">If true, the search result will sorted by CSI numbers. Defaults to true. (optional)</param>
        /// <param name="costLineType">If supplied, returns only unit lines of the specified type. Default to all types. (optional)</param>
        /// <param name="searchTerm">If supplied, returns only unit lines containing the specified search terms. (optional)</param>
        /// <param name="divisionCode">If supplied, searches within a specified division. Accepts division codes for any level in the hierarchy (two, four, six or eight digit division codes). (optional)</param>
        /// <param name="offset">For paging, specify the offset from which to start returning results. Defaults to zero. (optional)</param>
        /// <param name="limit">For paging, specify the maximum number of unit lines to return in a single request. Defaults to 25 and Max value is 100. (optional)</param>
        /// <returns>UnitLineSearchResult</returns>
        public UnitLineSearchResult CostdataUnitCatalogsByCatIdCostLinesSearchGet (string catId, bool? includeDivisionCount = null, bool? includeCostLines = null, bool? sortByLineNumber = null, string costLineType = null, string searchTerm = null, string divisionCode = null, int? offset = null, int? limit = null)
        {
             ApiResponse<UnitLineSearchResult> localVarResponse = CostdataUnitCatalogsByCatIdCostLinesSearchGetWithHttpInfo(catId, includeDivisionCount, includeCostLines, sortByLineNumber, costLineType, searchTerm, divisionCode, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of localized unit cost lines with aggregations at the top division level. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="includeDivisionCount">If true, the search result will include the number of unit lines that match the key word search for each division. Defaults to true. (optional)</param>
        /// <param name="includeCostLines">If true, the search result will include unit lines that match the key word search. Defaults to true. (optional)</param>
        /// <param name="sortByLineNumber">If true, the search result will sorted by CSI numbers. Defaults to true. (optional)</param>
        /// <param name="costLineType">If supplied, returns only unit lines of the specified type. Default to all types. (optional)</param>
        /// <param name="searchTerm">If supplied, returns only unit lines containing the specified search terms. (optional)</param>
        /// <param name="divisionCode">If supplied, searches within a specified division. Accepts division codes for any level in the hierarchy (two, four, six or eight digit division codes). (optional)</param>
        /// <param name="offset">For paging, specify the offset from which to start returning results. Defaults to zero. (optional)</param>
        /// <param name="limit">For paging, specify the maximum number of unit lines to return in a single request. Defaults to 25 and Max value is 100. (optional)</param>
        /// <returns>ApiResponse of UnitLineSearchResult</returns>
        public ApiResponse< UnitLineSearchResult > CostdataUnitCatalogsByCatIdCostLinesSearchGetWithHttpInfo (string catId, bool? includeDivisionCount = null, bool? includeCostLines = null, bool? sortByLineNumber = null, string costLineType = null, string searchTerm = null, string divisionCode = null, int? offset = null, int? limit = null)
        {
            // verify the required parameter 'catId' is set
            if (catId == null)
                throw new ApiException(400, "Missing required parameter 'catId' when calling CostDataUnitCostLinesApi->CostdataUnitCatalogsByCatIdCostLinesSearchGet");

            var localVarPath = "/v1/costdata/unit/catalogs/{catId}/costlines/_search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (catId != null) localVarPathParams.Add("catId", this.Configuration.ApiClient.ParameterToString(catId)); // path parameter
            if (includeDivisionCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDivisionCount", includeDivisionCount)); // query parameter
            if (includeCostLines != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeCostLines", includeCostLines)); // query parameter
            if (sortByLineNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortByLineNumber", sortByLineNumber)); // query parameter
            if (costLineType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "costLineType", costLineType)); // query parameter
            if (searchTerm != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchTerm", searchTerm)); // query parameter
            if (divisionCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "divisionCode", divisionCode)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (rsmids_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CostdataUnitCatalogsByCatIdCostLinesSearchGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnitLineSearchResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnitLineSearchResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnitLineSearchResult)));
        }

        /// <summary>
        /// Gets a list of localized unit cost lines with aggregations at the top division level. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="includeDivisionCount">If true, the search result will include the number of unit lines that match the key word search for each division. Defaults to true. (optional)</param>
        /// <param name="includeCostLines">If true, the search result will include unit lines that match the key word search. Defaults to true. (optional)</param>
        /// <param name="sortByLineNumber">If true, the search result will sorted by CSI numbers. Defaults to true. (optional)</param>
        /// <param name="costLineType">If supplied, returns only unit lines of the specified type. Default to all types. (optional)</param>
        /// <param name="searchTerm">If supplied, returns only unit lines containing the specified search terms. (optional)</param>
        /// <param name="divisionCode">If supplied, searches within a specified division. Accepts division codes for any level in the hierarchy (two, four, six or eight digit division codes). (optional)</param>
        /// <param name="offset">For paging, specify the offset from which to start returning results. Defaults to zero. (optional)</param>
        /// <param name="limit">For paging, specify the maximum number of unit lines to return in a single request. Defaults to 25 and Max value is 100. (optional)</param>
        /// <returns>Task of UnitLineSearchResult</returns>
        public async System.Threading.Tasks.Task<UnitLineSearchResult> CostdataUnitCatalogsByCatIdCostLinesSearchGetAsync (string catId, bool? includeDivisionCount = null, bool? includeCostLines = null, bool? sortByLineNumber = null, string costLineType = null, string searchTerm = null, string divisionCode = null, int? offset = null, int? limit = null)
        {
             ApiResponse<UnitLineSearchResult> localVarResponse = await CostdataUnitCatalogsByCatIdCostLinesSearchGetAsyncWithHttpInfo(catId, includeDivisionCount, includeCostLines, sortByLineNumber, costLineType, searchTerm, divisionCode, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of localized unit cost lines with aggregations at the top division level. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">The catalog identifier.</param>
        /// <param name="includeDivisionCount">If true, the search result will include the number of unit lines that match the key word search for each division. Defaults to true. (optional)</param>
        /// <param name="includeCostLines">If true, the search result will include unit lines that match the key word search. Defaults to true. (optional)</param>
        /// <param name="sortByLineNumber">If true, the search result will sorted by CSI numbers. Defaults to true. (optional)</param>
        /// <param name="costLineType">If supplied, returns only unit lines of the specified type. Default to all types. (optional)</param>
        /// <param name="searchTerm">If supplied, returns only unit lines containing the specified search terms. (optional)</param>
        /// <param name="divisionCode">If supplied, searches within a specified division. Accepts division codes for any level in the hierarchy (two, four, six or eight digit division codes). (optional)</param>
        /// <param name="offset">For paging, specify the offset from which to start returning results. Defaults to zero. (optional)</param>
        /// <param name="limit">For paging, specify the maximum number of unit lines to return in a single request. Defaults to 25 and Max value is 100. (optional)</param>
        /// <returns>Task of ApiResponse (UnitLineSearchResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UnitLineSearchResult>> CostdataUnitCatalogsByCatIdCostLinesSearchGetAsyncWithHttpInfo (string catId, bool? includeDivisionCount = null, bool? includeCostLines = null, bool? sortByLineNumber = null, string costLineType = null, string searchTerm = null, string divisionCode = null, int? offset = null, int? limit = null)
        {
            // verify the required parameter 'catId' is set
            if (catId == null)
                throw new ApiException(400, "Missing required parameter 'catId' when calling CostDataUnitCostLinesApi->CostdataUnitCatalogsByCatIdCostLinesSearchGet");

            var localVarPath = "/v1/costdata/unit/catalogs/{catId}/costlines/_search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (catId != null) localVarPathParams.Add("catId", this.Configuration.ApiClient.ParameterToString(catId)); // path parameter
            if (includeDivisionCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDivisionCount", includeDivisionCount)); // query parameter
            if (includeCostLines != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeCostLines", includeCostLines)); // query parameter
            if (sortByLineNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortByLineNumber", sortByLineNumber)); // query parameter
            if (costLineType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "costLineType", costLineType)); // query parameter
            if (searchTerm != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchTerm", searchTerm)); // query parameter
            if (divisionCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "divisionCode", divisionCode)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (rsmids_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CostdataUnitCatalogsByCatIdCostLinesSearchGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnitLineSearchResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnitLineSearchResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnitLineSearchResult)));
        }

    }
}
