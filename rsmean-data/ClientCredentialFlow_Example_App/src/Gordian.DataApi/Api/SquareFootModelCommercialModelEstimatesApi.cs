/* 
 * RSMeans Consumer REST API V1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using Gordian.DataApi.Client;
using Gordian.DataApi.Model;
using RestSharp;

namespace Gordian.DataApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISquareFootModelCommercialModelEstimatesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets a model estimate by model Id, wall code, and other parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The model Id, for example 2017-001.</param>
        /// <param name="wallCode">The wall code.</param>
        /// <param name="releaseId">The release identifier. Defaults to the most recent annual release. (optional)</param>
        /// <param name="locationId">The location identifier for computing localized costs. Defaults to US National Average (us-us-national). (optional)</param>
        /// <param name="laborType">Specifies standard union or open shop unit lines. Defaults to standard union (std). (optional)</param>
        /// <param name="area">Area of the building (S.F.). Model default will be used if not provided. (optional)</param>
        /// <param name="perimeter">Perimeter of the building (L.F.). Model default will be used if not provided. (optional)</param>
        /// <param name="stories">Stories of the building. Model default will be used if not provided. (optional)</param>
        /// <param name="storyHeight">Story height of the building (L.F.). Model default will be used if not provided. (optional)</param>
        /// <param name="includeBasement">Specifies if basement is includeded. Default to false. (optional)</param>
        /// <param name="contractorFees">Contractor fees by percentage. Model default will be used if not provided. (optional)</param>
        /// <param name="architecturalFees">Architectural fees by percentage. Model default will be used if not provided. (optional)</param>
        /// <param name="userFees">User fees by percentage. Model default will be used if not provided. (optional)</param>
        /// <returns>CommercialBuilding</returns>
        CommercialBuilding SquarefootmodelCommercialModelEstimatesByModelIdwallCodeGet (string modelId, string wallCode, string releaseId = null, string locationId = null, string laborType = null, double? area = null, double? perimeter = null, double? stories = null, double? storyHeight = null, bool? includeBasement = null, double? contractorFees = null, double? architecturalFees = null, double? userFees = null);

        /// <summary>
        /// Gets a model estimate by model Id, wall code, and other parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The model Id, for example 2017-001.</param>
        /// <param name="wallCode">The wall code.</param>
        /// <param name="releaseId">The release identifier. Defaults to the most recent annual release. (optional)</param>
        /// <param name="locationId">The location identifier for computing localized costs. Defaults to US National Average (us-us-national). (optional)</param>
        /// <param name="laborType">Specifies standard union or open shop unit lines. Defaults to standard union (std). (optional)</param>
        /// <param name="area">Area of the building (S.F.). Model default will be used if not provided. (optional)</param>
        /// <param name="perimeter">Perimeter of the building (L.F.). Model default will be used if not provided. (optional)</param>
        /// <param name="stories">Stories of the building. Model default will be used if not provided. (optional)</param>
        /// <param name="storyHeight">Story height of the building (L.F.). Model default will be used if not provided. (optional)</param>
        /// <param name="includeBasement">Specifies if basement is includeded. Default to false. (optional)</param>
        /// <param name="contractorFees">Contractor fees by percentage. Model default will be used if not provided. (optional)</param>
        /// <param name="architecturalFees">Architectural fees by percentage. Model default will be used if not provided. (optional)</param>
        /// <param name="userFees">User fees by percentage. Model default will be used if not provided. (optional)</param>
        /// <returns>ApiResponse of CommercialBuilding</returns>
        ApiResponse<CommercialBuilding> SquarefootmodelCommercialModelEstimatesByModelIdwallCodeGetWithHttpInfo (string modelId, string wallCode, string releaseId = null, string locationId = null, string laborType = null, double? area = null, double? perimeter = null, double? stories = null, double? storyHeight = null, bool? includeBasement = null, double? contractorFees = null, double? architecturalFees = null, double? userFees = null);
        /// <summary>
        /// Gets a customized model estimate by specifying assembly lines to add, update, or delete.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The model Id, for example, 2017-001.</param>
        /// <param name="wallCode">The wall code.</param>
        /// <param name="releaseId">The release identifier. Defaults to the most recent annual release. (optional)</param>
        /// <param name="locationId">The location identifier for computing localized costs. Defaults to US National Average (us-us-national). (optional)</param>
        /// <param name="laborType">Specifies standard union or open shop unit lines. Defaults to standard union (std). (optional)</param>
        /// <param name="area">Area of the building (S.F.). Model default will be used if not provided. (optional)</param>
        /// <param name="perimeter">Perimeter of the building (L.F.). Model default will be used if not provided. (optional)</param>
        /// <param name="stories">Stories of the building. Model default will be used if not provided. (optional)</param>
        /// <param name="storyHeight">Story height of the building (L.F.). Model default will be used if not provided. (optional)</param>
        /// <param name="includeBasement">Specifies whether or not to include basement in the estimate. Defaults to false. (optional)</param>
        /// <param name="contractorFees">Contractor fees by percentage. Model default will be used if not provided. (optional)</param>
        /// <param name="architecturalFees">Architectural fees by percentage. Model default will be used if not provided. (optional)</param>
        /// <param name="userFees">User fees by percentage. Model default will be used if not provided. (optional)</param>
        /// <param name="assemblyLineCustomizations">Use this to customize the estimate by specifying assembly lines to add, update or delete. Valid swap action types are \&quot;add\&quot;, \&quot;update\&quot; or \&quot;delete\&quot;. (optional)</param>
        /// <returns>CommercialBuilding</returns>
        CommercialBuilding SquarefootmodelCommercialModelEstimatesByModelIdwallCodePost (string modelId, string wallCode, string releaseId = null, string locationId = null, string laborType = null, double? area = null, double? perimeter = null, double? stories = null, double? storyHeight = null, bool? includeBasement = null, double? contractorFees = null, double? architecturalFees = null, double? userFees = null, List<CustomizationRequest> assemblyLineCustomizations = null);

        /// <summary>
        /// Gets a customized model estimate by specifying assembly lines to add, update, or delete.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The model Id, for example, 2017-001.</param>
        /// <param name="wallCode">The wall code.</param>
        /// <param name="releaseId">The release identifier. Defaults to the most recent annual release. (optional)</param>
        /// <param name="locationId">The location identifier for computing localized costs. Defaults to US National Average (us-us-national). (optional)</param>
        /// <param name="laborType">Specifies standard union or open shop unit lines. Defaults to standard union (std). (optional)</param>
        /// <param name="area">Area of the building (S.F.). Model default will be used if not provided. (optional)</param>
        /// <param name="perimeter">Perimeter of the building (L.F.). Model default will be used if not provided. (optional)</param>
        /// <param name="stories">Stories of the building. Model default will be used if not provided. (optional)</param>
        /// <param name="storyHeight">Story height of the building (L.F.). Model default will be used if not provided. (optional)</param>
        /// <param name="includeBasement">Specifies whether or not to include basement in the estimate. Defaults to false. (optional)</param>
        /// <param name="contractorFees">Contractor fees by percentage. Model default will be used if not provided. (optional)</param>
        /// <param name="architecturalFees">Architectural fees by percentage. Model default will be used if not provided. (optional)</param>
        /// <param name="userFees">User fees by percentage. Model default will be used if not provided. (optional)</param>
        /// <param name="assemblyLineCustomizations">Use this to customize the estimate by specifying assembly lines to add, update or delete. Valid swap action types are \&quot;add\&quot;, \&quot;update\&quot; or \&quot;delete\&quot;. (optional)</param>
        /// <returns>ApiResponse of CommercialBuilding</returns>
        ApiResponse<CommercialBuilding> SquarefootmodelCommercialModelEstimatesByModelIdwallCodePostWithHttpInfo (string modelId, string wallCode, string releaseId = null, string locationId = null, string laborType = null, double? area = null, double? perimeter = null, double? stories = null, double? storyHeight = null, bool? includeBasement = null, double? contractorFees = null, double? architecturalFees = null, double? userFees = null, List<CustomizationRequest> assemblyLineCustomizations = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets a model estimate by model Id, wall code, and other parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The model Id, for example 2017-001.</param>
        /// <param name="wallCode">The wall code.</param>
        /// <param name="releaseId">The release identifier. Defaults to the most recent annual release. (optional)</param>
        /// <param name="locationId">The location identifier for computing localized costs. Defaults to US National Average (us-us-national). (optional)</param>
        /// <param name="laborType">Specifies standard union or open shop unit lines. Defaults to standard union (std). (optional)</param>
        /// <param name="area">Area of the building (S.F.). Model default will be used if not provided. (optional)</param>
        /// <param name="perimeter">Perimeter of the building (L.F.). Model default will be used if not provided. (optional)</param>
        /// <param name="stories">Stories of the building. Model default will be used if not provided. (optional)</param>
        /// <param name="storyHeight">Story height of the building (L.F.). Model default will be used if not provided. (optional)</param>
        /// <param name="includeBasement">Specifies if basement is includeded. Default to false. (optional)</param>
        /// <param name="contractorFees">Contractor fees by percentage. Model default will be used if not provided. (optional)</param>
        /// <param name="architecturalFees">Architectural fees by percentage. Model default will be used if not provided. (optional)</param>
        /// <param name="userFees">User fees by percentage. Model default will be used if not provided. (optional)</param>
        /// <returns>Task of CommercialBuilding</returns>
        System.Threading.Tasks.Task<CommercialBuilding> SquarefootmodelCommercialModelEstimatesByModelIdwallCodeGetAsync (string modelId, string wallCode, string releaseId = null, string locationId = null, string laborType = null, double? area = null, double? perimeter = null, double? stories = null, double? storyHeight = null, bool? includeBasement = null, double? contractorFees = null, double? architecturalFees = null, double? userFees = null);

        /// <summary>
        /// Gets a model estimate by model Id, wall code, and other parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The model Id, for example 2017-001.</param>
        /// <param name="wallCode">The wall code.</param>
        /// <param name="releaseId">The release identifier. Defaults to the most recent annual release. (optional)</param>
        /// <param name="locationId">The location identifier for computing localized costs. Defaults to US National Average (us-us-national). (optional)</param>
        /// <param name="laborType">Specifies standard union or open shop unit lines. Defaults to standard union (std). (optional)</param>
        /// <param name="area">Area of the building (S.F.). Model default will be used if not provided. (optional)</param>
        /// <param name="perimeter">Perimeter of the building (L.F.). Model default will be used if not provided. (optional)</param>
        /// <param name="stories">Stories of the building. Model default will be used if not provided. (optional)</param>
        /// <param name="storyHeight">Story height of the building (L.F.). Model default will be used if not provided. (optional)</param>
        /// <param name="includeBasement">Specifies if basement is includeded. Default to false. (optional)</param>
        /// <param name="contractorFees">Contractor fees by percentage. Model default will be used if not provided. (optional)</param>
        /// <param name="architecturalFees">Architectural fees by percentage. Model default will be used if not provided. (optional)</param>
        /// <param name="userFees">User fees by percentage. Model default will be used if not provided. (optional)</param>
        /// <returns>Task of ApiResponse (CommercialBuilding)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommercialBuilding>> SquarefootmodelCommercialModelEstimatesByModelIdwallCodeGetAsyncWithHttpInfo (string modelId, string wallCode, string releaseId = null, string locationId = null, string laborType = null, double? area = null, double? perimeter = null, double? stories = null, double? storyHeight = null, bool? includeBasement = null, double? contractorFees = null, double? architecturalFees = null, double? userFees = null);
        /// <summary>
        /// Gets a customized model estimate by specifying assembly lines to add, update, or delete.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The model Id, for example, 2017-001.</param>
        /// <param name="wallCode">The wall code.</param>
        /// <param name="releaseId">The release identifier. Defaults to the most recent annual release. (optional)</param>
        /// <param name="locationId">The location identifier for computing localized costs. Defaults to US National Average (us-us-national). (optional)</param>
        /// <param name="laborType">Specifies standard union or open shop unit lines. Defaults to standard union (std). (optional)</param>
        /// <param name="area">Area of the building (S.F.). Model default will be used if not provided. (optional)</param>
        /// <param name="perimeter">Perimeter of the building (L.F.). Model default will be used if not provided. (optional)</param>
        /// <param name="stories">Stories of the building. Model default will be used if not provided. (optional)</param>
        /// <param name="storyHeight">Story height of the building (L.F.). Model default will be used if not provided. (optional)</param>
        /// <param name="includeBasement">Specifies whether or not to include basement in the estimate. Defaults to false. (optional)</param>
        /// <param name="contractorFees">Contractor fees by percentage. Model default will be used if not provided. (optional)</param>
        /// <param name="architecturalFees">Architectural fees by percentage. Model default will be used if not provided. (optional)</param>
        /// <param name="userFees">User fees by percentage. Model default will be used if not provided. (optional)</param>
        /// <param name="assemblyLineCustomizations">Use this to customize the estimate by specifying assembly lines to add, update or delete. Valid swap action types are \&quot;add\&quot;, \&quot;update\&quot; or \&quot;delete\&quot;. (optional)</param>
        /// <returns>Task of CommercialBuilding</returns>
        System.Threading.Tasks.Task<CommercialBuilding> SquarefootmodelCommercialModelEstimatesByModelIdwallCodePostAsync (string modelId, string wallCode, string releaseId = null, string locationId = null, string laborType = null, double? area = null, double? perimeter = null, double? stories = null, double? storyHeight = null, bool? includeBasement = null, double? contractorFees = null, double? architecturalFees = null, double? userFees = null, List<CustomizationRequest> assemblyLineCustomizations = null);

        /// <summary>
        /// Gets a customized model estimate by specifying assembly lines to add, update, or delete.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The model Id, for example, 2017-001.</param>
        /// <param name="wallCode">The wall code.</param>
        /// <param name="releaseId">The release identifier. Defaults to the most recent annual release. (optional)</param>
        /// <param name="locationId">The location identifier for computing localized costs. Defaults to US National Average (us-us-national). (optional)</param>
        /// <param name="laborType">Specifies standard union or open shop unit lines. Defaults to standard union (std). (optional)</param>
        /// <param name="area">Area of the building (S.F.). Model default will be used if not provided. (optional)</param>
        /// <param name="perimeter">Perimeter of the building (L.F.). Model default will be used if not provided. (optional)</param>
        /// <param name="stories">Stories of the building. Model default will be used if not provided. (optional)</param>
        /// <param name="storyHeight">Story height of the building (L.F.). Model default will be used if not provided. (optional)</param>
        /// <param name="includeBasement">Specifies whether or not to include basement in the estimate. Defaults to false. (optional)</param>
        /// <param name="contractorFees">Contractor fees by percentage. Model default will be used if not provided. (optional)</param>
        /// <param name="architecturalFees">Architectural fees by percentage. Model default will be used if not provided. (optional)</param>
        /// <param name="userFees">User fees by percentage. Model default will be used if not provided. (optional)</param>
        /// <param name="assemblyLineCustomizations">Use this to customize the estimate by specifying assembly lines to add, update or delete. Valid swap action types are \&quot;add\&quot;, \&quot;update\&quot; or \&quot;delete\&quot;. (optional)</param>
        /// <returns>Task of ApiResponse (CommercialBuilding)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommercialBuilding>> SquarefootmodelCommercialModelEstimatesByModelIdwallCodePostAsyncWithHttpInfo (string modelId, string wallCode, string releaseId = null, string locationId = null, string laborType = null, double? area = null, double? perimeter = null, double? stories = null, double? storyHeight = null, bool? includeBasement = null, double? contractorFees = null, double? architecturalFees = null, double? userFees = null, List<CustomizationRequest> assemblyLineCustomizations = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SquareFootModelCommercialModelEstimatesApi : ISquareFootModelCommercialModelEstimatesApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SquareFootModelCommercialModelEstimatesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SquareFootModelCommercialModelEstimatesApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SquareFootModelCommercialModelEstimatesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SquareFootModelCommercialModelEstimatesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets a model estimate by model Id, wall code, and other parameters. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The model Id, for example 2017-001.</param>
        /// <param name="wallCode">The wall code.</param>
        /// <param name="releaseId">The release identifier. Defaults to the most recent annual release. (optional)</param>
        /// <param name="locationId">The location identifier for computing localized costs. Defaults to US National Average (us-us-national). (optional)</param>
        /// <param name="laborType">Specifies standard union or open shop unit lines. Defaults to standard union (std). (optional)</param>
        /// <param name="area">Area of the building (S.F.). Model default will be used if not provided. (optional)</param>
        /// <param name="perimeter">Perimeter of the building (L.F.). Model default will be used if not provided. (optional)</param>
        /// <param name="stories">Stories of the building. Model default will be used if not provided. (optional)</param>
        /// <param name="storyHeight">Story height of the building (L.F.). Model default will be used if not provided. (optional)</param>
        /// <param name="includeBasement">Specifies if basement is includeded. Default to false. (optional)</param>
        /// <param name="contractorFees">Contractor fees by percentage. Model default will be used if not provided. (optional)</param>
        /// <param name="architecturalFees">Architectural fees by percentage. Model default will be used if not provided. (optional)</param>
        /// <param name="userFees">User fees by percentage. Model default will be used if not provided. (optional)</param>
        /// <returns>CommercialBuilding</returns>
        public CommercialBuilding SquarefootmodelCommercialModelEstimatesByModelIdwallCodeGet (string modelId, string wallCode, string releaseId = null, string locationId = null, string laborType = null, double? area = null, double? perimeter = null, double? stories = null, double? storyHeight = null, bool? includeBasement = null, double? contractorFees = null, double? architecturalFees = null, double? userFees = null)
        {
             ApiResponse<CommercialBuilding> localVarResponse = SquarefootmodelCommercialModelEstimatesByModelIdwallCodeGetWithHttpInfo(modelId, wallCode, releaseId, locationId, laborType, area, perimeter, stories, storyHeight, includeBasement, contractorFees, architecturalFees, userFees);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a model estimate by model Id, wall code, and other parameters. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The model Id, for example 2017-001.</param>
        /// <param name="wallCode">The wall code.</param>
        /// <param name="releaseId">The release identifier. Defaults to the most recent annual release. (optional)</param>
        /// <param name="locationId">The location identifier for computing localized costs. Defaults to US National Average (us-us-national). (optional)</param>
        /// <param name="laborType">Specifies standard union or open shop unit lines. Defaults to standard union (std). (optional)</param>
        /// <param name="area">Area of the building (S.F.). Model default will be used if not provided. (optional)</param>
        /// <param name="perimeter">Perimeter of the building (L.F.). Model default will be used if not provided. (optional)</param>
        /// <param name="stories">Stories of the building. Model default will be used if not provided. (optional)</param>
        /// <param name="storyHeight">Story height of the building (L.F.). Model default will be used if not provided. (optional)</param>
        /// <param name="includeBasement">Specifies if basement is includeded. Default to false. (optional)</param>
        /// <param name="contractorFees">Contractor fees by percentage. Model default will be used if not provided. (optional)</param>
        /// <param name="architecturalFees">Architectural fees by percentage. Model default will be used if not provided. (optional)</param>
        /// <param name="userFees">User fees by percentage. Model default will be used if not provided. (optional)</param>
        /// <returns>ApiResponse of CommercialBuilding</returns>
        public ApiResponse< CommercialBuilding > SquarefootmodelCommercialModelEstimatesByModelIdwallCodeGetWithHttpInfo (string modelId, string wallCode, string releaseId = null, string locationId = null, string laborType = null, double? area = null, double? perimeter = null, double? stories = null, double? storyHeight = null, bool? includeBasement = null, double? contractorFees = null, double? architecturalFees = null, double? userFees = null)
        {
            // verify the required parameter 'modelId' is set
            if (modelId == null)
                throw new ApiException(400, "Missing required parameter 'modelId' when calling SquareFootModelCommercialModelEstimatesApi->SquarefootmodelCommercialModelEstimatesByModelIdwallCodeGet");
            // verify the required parameter 'wallCode' is set
            if (wallCode == null)
                throw new ApiException(400, "Missing required parameter 'wallCode' when calling SquareFootModelCommercialModelEstimatesApi->SquarefootmodelCommercialModelEstimatesByModelIdwallCodeGet");

            var localVarPath = "/v1/squarefootmodel/commercial/modelestimates/{modelId}-{wallCode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelId != null) localVarPathParams.Add("modelId", this.Configuration.ApiClient.ParameterToString(modelId)); // path parameter
            if (wallCode != null) localVarPathParams.Add("wallCode", this.Configuration.ApiClient.ParameterToString(wallCode)); // path parameter
            if (releaseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "releaseId", releaseId)); // query parameter
            if (locationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locationId", locationId)); // query parameter
            if (laborType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "laborType", laborType)); // query parameter
            if (area != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "area", area)); // query parameter
            if (perimeter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perimeter", perimeter)); // query parameter
            if (stories != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stories", stories)); // query parameter
            if (storyHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storyHeight", storyHeight)); // query parameter
            if (includeBasement != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeBasement", includeBasement)); // query parameter
            if (contractorFees != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contractorFees", contractorFees)); // query parameter
            if (architecturalFees != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "architecturalFees", architecturalFees)); // query parameter
            if (userFees != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userFees", userFees)); // query parameter

            // authentication (rsmids_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SquarefootmodelCommercialModelEstimatesByModelIdwallCodeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommercialBuilding>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommercialBuilding) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommercialBuilding)));
        }

        /// <summary>
        /// Gets a model estimate by model Id, wall code, and other parameters. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The model Id, for example 2017-001.</param>
        /// <param name="wallCode">The wall code.</param>
        /// <param name="releaseId">The release identifier. Defaults to the most recent annual release. (optional)</param>
        /// <param name="locationId">The location identifier for computing localized costs. Defaults to US National Average (us-us-national). (optional)</param>
        /// <param name="laborType">Specifies standard union or open shop unit lines. Defaults to standard union (std). (optional)</param>
        /// <param name="area">Area of the building (S.F.). Model default will be used if not provided. (optional)</param>
        /// <param name="perimeter">Perimeter of the building (L.F.). Model default will be used if not provided. (optional)</param>
        /// <param name="stories">Stories of the building. Model default will be used if not provided. (optional)</param>
        /// <param name="storyHeight">Story height of the building (L.F.). Model default will be used if not provided. (optional)</param>
        /// <param name="includeBasement">Specifies if basement is includeded. Default to false. (optional)</param>
        /// <param name="contractorFees">Contractor fees by percentage. Model default will be used if not provided. (optional)</param>
        /// <param name="architecturalFees">Architectural fees by percentage. Model default will be used if not provided. (optional)</param>
        /// <param name="userFees">User fees by percentage. Model default will be used if not provided. (optional)</param>
        /// <returns>Task of CommercialBuilding</returns>
        public async System.Threading.Tasks.Task<CommercialBuilding> SquarefootmodelCommercialModelEstimatesByModelIdwallCodeGetAsync (string modelId, string wallCode, string releaseId = null, string locationId = null, string laborType = null, double? area = null, double? perimeter = null, double? stories = null, double? storyHeight = null, bool? includeBasement = null, double? contractorFees = null, double? architecturalFees = null, double? userFees = null)
        {
             ApiResponse<CommercialBuilding> localVarResponse = await SquarefootmodelCommercialModelEstimatesByModelIdwallCodeGetAsyncWithHttpInfo(modelId, wallCode, releaseId, locationId, laborType, area, perimeter, stories, storyHeight, includeBasement, contractorFees, architecturalFees, userFees);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a model estimate by model Id, wall code, and other parameters. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The model Id, for example 2017-001.</param>
        /// <param name="wallCode">The wall code.</param>
        /// <param name="releaseId">The release identifier. Defaults to the most recent annual release. (optional)</param>
        /// <param name="locationId">The location identifier for computing localized costs. Defaults to US National Average (us-us-national). (optional)</param>
        /// <param name="laborType">Specifies standard union or open shop unit lines. Defaults to standard union (std). (optional)</param>
        /// <param name="area">Area of the building (S.F.). Model default will be used if not provided. (optional)</param>
        /// <param name="perimeter">Perimeter of the building (L.F.). Model default will be used if not provided. (optional)</param>
        /// <param name="stories">Stories of the building. Model default will be used if not provided. (optional)</param>
        /// <param name="storyHeight">Story height of the building (L.F.). Model default will be used if not provided. (optional)</param>
        /// <param name="includeBasement">Specifies if basement is includeded. Default to false. (optional)</param>
        /// <param name="contractorFees">Contractor fees by percentage. Model default will be used if not provided. (optional)</param>
        /// <param name="architecturalFees">Architectural fees by percentage. Model default will be used if not provided. (optional)</param>
        /// <param name="userFees">User fees by percentage. Model default will be used if not provided. (optional)</param>
        /// <returns>Task of ApiResponse (CommercialBuilding)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CommercialBuilding>> SquarefootmodelCommercialModelEstimatesByModelIdwallCodeGetAsyncWithHttpInfo (string modelId, string wallCode, string releaseId = null, string locationId = null, string laborType = null, double? area = null, double? perimeter = null, double? stories = null, double? storyHeight = null, bool? includeBasement = null, double? contractorFees = null, double? architecturalFees = null, double? userFees = null)
        {
            // verify the required parameter 'modelId' is set
            if (modelId == null)
                throw new ApiException(400, "Missing required parameter 'modelId' when calling SquareFootModelCommercialModelEstimatesApi->SquarefootmodelCommercialModelEstimatesByModelIdwallCodeGet");
            // verify the required parameter 'wallCode' is set
            if (wallCode == null)
                throw new ApiException(400, "Missing required parameter 'wallCode' when calling SquareFootModelCommercialModelEstimatesApi->SquarefootmodelCommercialModelEstimatesByModelIdwallCodeGet");

            var localVarPath = "/v1/squarefootmodel/commercial/modelestimates/{modelId}-{wallCode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelId != null) localVarPathParams.Add("modelId", this.Configuration.ApiClient.ParameterToString(modelId)); // path parameter
            if (wallCode != null) localVarPathParams.Add("wallCode", this.Configuration.ApiClient.ParameterToString(wallCode)); // path parameter
            if (releaseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "releaseId", releaseId)); // query parameter
            if (locationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locationId", locationId)); // query parameter
            if (laborType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "laborType", laborType)); // query parameter
            if (area != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "area", area)); // query parameter
            if (perimeter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perimeter", perimeter)); // query parameter
            if (stories != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stories", stories)); // query parameter
            if (storyHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storyHeight", storyHeight)); // query parameter
            if (includeBasement != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeBasement", includeBasement)); // query parameter
            if (contractorFees != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contractorFees", contractorFees)); // query parameter
            if (architecturalFees != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "architecturalFees", architecturalFees)); // query parameter
            if (userFees != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userFees", userFees)); // query parameter

            // authentication (rsmids_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SquarefootmodelCommercialModelEstimatesByModelIdwallCodeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommercialBuilding>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommercialBuilding) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommercialBuilding)));
        }

        /// <summary>
        /// Gets a customized model estimate by specifying assembly lines to add, update, or delete. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The model Id, for example, 2017-001.</param>
        /// <param name="wallCode">The wall code.</param>
        /// <param name="releaseId">The release identifier. Defaults to the most recent annual release. (optional)</param>
        /// <param name="locationId">The location identifier for computing localized costs. Defaults to US National Average (us-us-national). (optional)</param>
        /// <param name="laborType">Specifies standard union or open shop unit lines. Defaults to standard union (std). (optional)</param>
        /// <param name="area">Area of the building (S.F.). Model default will be used if not provided. (optional)</param>
        /// <param name="perimeter">Perimeter of the building (L.F.). Model default will be used if not provided. (optional)</param>
        /// <param name="stories">Stories of the building. Model default will be used if not provided. (optional)</param>
        /// <param name="storyHeight">Story height of the building (L.F.). Model default will be used if not provided. (optional)</param>
        /// <param name="includeBasement">Specifies whether or not to include basement in the estimate. Defaults to false. (optional)</param>
        /// <param name="contractorFees">Contractor fees by percentage. Model default will be used if not provided. (optional)</param>
        /// <param name="architecturalFees">Architectural fees by percentage. Model default will be used if not provided. (optional)</param>
        /// <param name="userFees">User fees by percentage. Model default will be used if not provided. (optional)</param>
        /// <param name="assemblyLineCustomizations">Use this to customize the estimate by specifying assembly lines to add, update or delete. Valid swap action types are \&quot;add\&quot;, \&quot;update\&quot; or \&quot;delete\&quot;. (optional)</param>
        /// <returns>CommercialBuilding</returns>
        public CommercialBuilding SquarefootmodelCommercialModelEstimatesByModelIdwallCodePost (string modelId, string wallCode, string releaseId = null, string locationId = null, string laborType = null, double? area = null, double? perimeter = null, double? stories = null, double? storyHeight = null, bool? includeBasement = null, double? contractorFees = null, double? architecturalFees = null, double? userFees = null, List<CustomizationRequest> assemblyLineCustomizations = null)
        {
             ApiResponse<CommercialBuilding> localVarResponse = SquarefootmodelCommercialModelEstimatesByModelIdwallCodePostWithHttpInfo(modelId, wallCode, releaseId, locationId, laborType, area, perimeter, stories, storyHeight, includeBasement, contractorFees, architecturalFees, userFees, assemblyLineCustomizations);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a customized model estimate by specifying assembly lines to add, update, or delete. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The model Id, for example, 2017-001.</param>
        /// <param name="wallCode">The wall code.</param>
        /// <param name="releaseId">The release identifier. Defaults to the most recent annual release. (optional)</param>
        /// <param name="locationId">The location identifier for computing localized costs. Defaults to US National Average (us-us-national). (optional)</param>
        /// <param name="laborType">Specifies standard union or open shop unit lines. Defaults to standard union (std). (optional)</param>
        /// <param name="area">Area of the building (S.F.). Model default will be used if not provided. (optional)</param>
        /// <param name="perimeter">Perimeter of the building (L.F.). Model default will be used if not provided. (optional)</param>
        /// <param name="stories">Stories of the building. Model default will be used if not provided. (optional)</param>
        /// <param name="storyHeight">Story height of the building (L.F.). Model default will be used if not provided. (optional)</param>
        /// <param name="includeBasement">Specifies whether or not to include basement in the estimate. Defaults to false. (optional)</param>
        /// <param name="contractorFees">Contractor fees by percentage. Model default will be used if not provided. (optional)</param>
        /// <param name="architecturalFees">Architectural fees by percentage. Model default will be used if not provided. (optional)</param>
        /// <param name="userFees">User fees by percentage. Model default will be used if not provided. (optional)</param>
        /// <param name="assemblyLineCustomizations">Use this to customize the estimate by specifying assembly lines to add, update or delete. Valid swap action types are \&quot;add\&quot;, \&quot;update\&quot; or \&quot;delete\&quot;. (optional)</param>
        /// <returns>ApiResponse of CommercialBuilding</returns>
        public ApiResponse< CommercialBuilding > SquarefootmodelCommercialModelEstimatesByModelIdwallCodePostWithHttpInfo (string modelId, string wallCode, string releaseId = null, string locationId = null, string laborType = null, double? area = null, double? perimeter = null, double? stories = null, double? storyHeight = null, bool? includeBasement = null, double? contractorFees = null, double? architecturalFees = null, double? userFees = null, List<CustomizationRequest> assemblyLineCustomizations = null)
        {
            // verify the required parameter 'modelId' is set
            if (modelId == null)
                throw new ApiException(400, "Missing required parameter 'modelId' when calling SquareFootModelCommercialModelEstimatesApi->SquarefootmodelCommercialModelEstimatesByModelIdwallCodePost");
            // verify the required parameter 'wallCode' is set
            if (wallCode == null)
                throw new ApiException(400, "Missing required parameter 'wallCode' when calling SquareFootModelCommercialModelEstimatesApi->SquarefootmodelCommercialModelEstimatesByModelIdwallCodePost");

            var localVarPath = "/v1/squarefootmodel/commercial/modelestimates/{modelId}-{wallCode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelId != null) localVarPathParams.Add("modelId", this.Configuration.ApiClient.ParameterToString(modelId)); // path parameter
            if (wallCode != null) localVarPathParams.Add("wallCode", this.Configuration.ApiClient.ParameterToString(wallCode)); // path parameter
            if (releaseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "releaseId", releaseId)); // query parameter
            if (locationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locationId", locationId)); // query parameter
            if (laborType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "laborType", laborType)); // query parameter
            if (area != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "area", area)); // query parameter
            if (perimeter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perimeter", perimeter)); // query parameter
            if (stories != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stories", stories)); // query parameter
            if (storyHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storyHeight", storyHeight)); // query parameter
            if (includeBasement != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeBasement", includeBasement)); // query parameter
            if (contractorFees != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contractorFees", contractorFees)); // query parameter
            if (architecturalFees != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "architecturalFees", architecturalFees)); // query parameter
            if (userFees != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userFees", userFees)); // query parameter
            if (assemblyLineCustomizations != null && assemblyLineCustomizations.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(assemblyLineCustomizations); // http body (model) parameter
            }
            else
            {
                localVarPostBody = assemblyLineCustomizations; // byte array
            }

            // authentication (rsmids_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SquarefootmodelCommercialModelEstimatesByModelIdwallCodePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommercialBuilding>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommercialBuilding) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommercialBuilding)));
        }

        /// <summary>
        /// Gets a customized model estimate by specifying assembly lines to add, update, or delete. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The model Id, for example, 2017-001.</param>
        /// <param name="wallCode">The wall code.</param>
        /// <param name="releaseId">The release identifier. Defaults to the most recent annual release. (optional)</param>
        /// <param name="locationId">The location identifier for computing localized costs. Defaults to US National Average (us-us-national). (optional)</param>
        /// <param name="laborType">Specifies standard union or open shop unit lines. Defaults to standard union (std). (optional)</param>
        /// <param name="area">Area of the building (S.F.). Model default will be used if not provided. (optional)</param>
        /// <param name="perimeter">Perimeter of the building (L.F.). Model default will be used if not provided. (optional)</param>
        /// <param name="stories">Stories of the building. Model default will be used if not provided. (optional)</param>
        /// <param name="storyHeight">Story height of the building (L.F.). Model default will be used if not provided. (optional)</param>
        /// <param name="includeBasement">Specifies whether or not to include basement in the estimate. Defaults to false. (optional)</param>
        /// <param name="contractorFees">Contractor fees by percentage. Model default will be used if not provided. (optional)</param>
        /// <param name="architecturalFees">Architectural fees by percentage. Model default will be used if not provided. (optional)</param>
        /// <param name="userFees">User fees by percentage. Model default will be used if not provided. (optional)</param>
        /// <param name="assemblyLineCustomizations">Use this to customize the estimate by specifying assembly lines to add, update or delete. Valid swap action types are \&quot;add\&quot;, \&quot;update\&quot; or \&quot;delete\&quot;. (optional)</param>
        /// <returns>Task of CommercialBuilding</returns>
        public async System.Threading.Tasks.Task<CommercialBuilding> SquarefootmodelCommercialModelEstimatesByModelIdwallCodePostAsync (string modelId, string wallCode, string releaseId = null, string locationId = null, string laborType = null, double? area = null, double? perimeter = null, double? stories = null, double? storyHeight = null, bool? includeBasement = null, double? contractorFees = null, double? architecturalFees = null, double? userFees = null, List<CustomizationRequest> assemblyLineCustomizations = null)
        {
             ApiResponse<CommercialBuilding> localVarResponse = await SquarefootmodelCommercialModelEstimatesByModelIdwallCodePostAsyncWithHttpInfo(modelId, wallCode, releaseId, locationId, laborType, area, perimeter, stories, storyHeight, includeBasement, contractorFees, architecturalFees, userFees, assemblyLineCustomizations);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a customized model estimate by specifying assembly lines to add, update, or delete. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The model Id, for example, 2017-001.</param>
        /// <param name="wallCode">The wall code.</param>
        /// <param name="releaseId">The release identifier. Defaults to the most recent annual release. (optional)</param>
        /// <param name="locationId">The location identifier for computing localized costs. Defaults to US National Average (us-us-national). (optional)</param>
        /// <param name="laborType">Specifies standard union or open shop unit lines. Defaults to standard union (std). (optional)</param>
        /// <param name="area">Area of the building (S.F.). Model default will be used if not provided. (optional)</param>
        /// <param name="perimeter">Perimeter of the building (L.F.). Model default will be used if not provided. (optional)</param>
        /// <param name="stories">Stories of the building. Model default will be used if not provided. (optional)</param>
        /// <param name="storyHeight">Story height of the building (L.F.). Model default will be used if not provided. (optional)</param>
        /// <param name="includeBasement">Specifies whether or not to include basement in the estimate. Defaults to false. (optional)</param>
        /// <param name="contractorFees">Contractor fees by percentage. Model default will be used if not provided. (optional)</param>
        /// <param name="architecturalFees">Architectural fees by percentage. Model default will be used if not provided. (optional)</param>
        /// <param name="userFees">User fees by percentage. Model default will be used if not provided. (optional)</param>
        /// <param name="assemblyLineCustomizations">Use this to customize the estimate by specifying assembly lines to add, update or delete. Valid swap action types are \&quot;add\&quot;, \&quot;update\&quot; or \&quot;delete\&quot;. (optional)</param>
        /// <returns>Task of ApiResponse (CommercialBuilding)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CommercialBuilding>> SquarefootmodelCommercialModelEstimatesByModelIdwallCodePostAsyncWithHttpInfo (string modelId, string wallCode, string releaseId = null, string locationId = null, string laborType = null, double? area = null, double? perimeter = null, double? stories = null, double? storyHeight = null, bool? includeBasement = null, double? contractorFees = null, double? architecturalFees = null, double? userFees = null, List<CustomizationRequest> assemblyLineCustomizations = null)
        {
            // verify the required parameter 'modelId' is set
            if (modelId == null)
                throw new ApiException(400, "Missing required parameter 'modelId' when calling SquareFootModelCommercialModelEstimatesApi->SquarefootmodelCommercialModelEstimatesByModelIdwallCodePost");
            // verify the required parameter 'wallCode' is set
            if (wallCode == null)
                throw new ApiException(400, "Missing required parameter 'wallCode' when calling SquareFootModelCommercialModelEstimatesApi->SquarefootmodelCommercialModelEstimatesByModelIdwallCodePost");

            var localVarPath = "/v1/squarefootmodel/commercial/modelestimates/{modelId}-{wallCode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelId != null) localVarPathParams.Add("modelId", this.Configuration.ApiClient.ParameterToString(modelId)); // path parameter
            if (wallCode != null) localVarPathParams.Add("wallCode", this.Configuration.ApiClient.ParameterToString(wallCode)); // path parameter
            if (releaseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "releaseId", releaseId)); // query parameter
            if (locationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locationId", locationId)); // query parameter
            if (laborType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "laborType", laborType)); // query parameter
            if (area != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "area", area)); // query parameter
            if (perimeter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perimeter", perimeter)); // query parameter
            if (stories != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stories", stories)); // query parameter
            if (storyHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storyHeight", storyHeight)); // query parameter
            if (includeBasement != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeBasement", includeBasement)); // query parameter
            if (contractorFees != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contractorFees", contractorFees)); // query parameter
            if (architecturalFees != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "architecturalFees", architecturalFees)); // query parameter
            if (userFees != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userFees", userFees)); // query parameter
            if (assemblyLineCustomizations != null && assemblyLineCustomizations.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(assemblyLineCustomizations); // http body (model) parameter
            }
            else
            {
                localVarPostBody = assemblyLineCustomizations; // byte array
            }

            // authentication (rsmids_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SquarefootmodelCommercialModelEstimatesByModelIdwallCodePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommercialBuilding>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommercialBuilding) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommercialBuilding)));
        }

    }
}
